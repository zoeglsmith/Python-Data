<!-- 
RSS generated by JIRA (8.20.10#820010-sha1:ace47f9899e9ee25d7157d59aa17ab06aee30d3d) at Sat May 27 09:42:54 UTC 2023

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>8.20.10</version>
        <build-number>820010</build-number>
        <build-date>22-06-2022</build-date>
    </build-info>


<item>
            <title>[CXF-7575] @Suspended race condition</title>
                <link>https://issues.apache.org/jira/browse/CXF-7575</link>
                <project id="12310511" key="CXF">CXF</project>
                    <description>&lt;p&gt;There appears to be a race condition with the use of AsyncResponseImpl where my user thread can invoke resume() before initialSuspend is set to false by suspendContinuationIfNeeded() and therefore the resume() call does not actually resume the Continuation &lt;em&gt;and returns true&lt;/em&gt;, indicating that the resume was successful even though it wasn&apos;t.&lt;/p&gt;

&lt;p&gt;I&apos;ve spent all day trying to make sense of this problem and my understanding of how all of this works together is still a bit spotty, but it seems to me that AsyncResponseImpl.suspendContinuationIfNeeded() (or something similar) should be called &lt;em&gt;before&lt;/em&gt; invoking the JAXRS method. Right now, that method is only called after the JAXRS method is invoked by JAXRSInvoker so the instance of AsyncResponse passed into the JAXRS method appears to not actually get suspended (or perhaps &lt;em&gt;marked&lt;/em&gt; internally as suspended) until after the JAXRS method returns.  If my async task happens to get finished very quickly and calls resume() before that happens, it fails silently.&lt;/p&gt;

&lt;p&gt;I seem to be able to circumvent this problem by running the following at the start of my JAXRS method (pseudo code):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@POST
@Path(....)
void myJaxrsMethod(@Suspended AsyncResponse asyncResponse, ...) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(asyncResponse &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; AsyncResponseImpl) {
        ((AsyncResponseImpl)asyncResponse).suspendContinuationIfNeeded()
    }
    &lt;span class=&quot;code-object&quot;&gt;Runnable&lt;/span&gt; asyncTask = createAsyncTask(asyncResponse)
    submitAsyncTask(asyncTask)
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which is why I suspect suspendContinuationIfNeeded() should be called before JAXRSInvoker invokes the JAXRS method.&lt;/p&gt;

&lt;p&gt;One of the things that made this really difficult to track down was that AsyncResponseImpl.resume() returns true even if the Continuation was not resumed! If you make it into doResumeFinal(), like was happening in my case, the return is always true even if cont.resume() is not called. So from user code, it looks like everything is ok, but the response never gets sent to the client.&lt;/p&gt;

&lt;p&gt;This seems somewhat related to the problems reported in &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7037&quot; title=&quot;@Suspended can be broken on tomcat&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7037&quot;&gt;&lt;del&gt;CXF-7037&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="13122277">CXF-7575</key>
            <summary>@Suspended race condition</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sergey_beryozkin">Sergey Beryozkin</assignee>
                                    <reporter username="jbellassai">John Bellassai</reporter>
                        <labels>
                    </labels>
                <created>Fri, 1 Dec 2017 20:50:43 +0000</created>
                <updated>Wed, 7 Feb 2018 14:51:58 +0000</updated>
                            <resolved>Tue, 30 Jan 2018 11:20:38 +0000</resolved>
                                    <version>3.1.14</version>
                                    <fixVersion>3.2.2</fixVersion>
                    <fixVersion>3.1.15</fixVersion>
                                    <component>JAX-RS</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                                                                <comments>
                            <comment id="16275019" author="sergey_beryozkin" created="Fri, 1 Dec 2017 21:32:15 +0000"  >&lt;p&gt;There&apos;s a test here&lt;br/&gt;
&lt;a href=&quot;https://github.com/apache/cxf/blob/master/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/BookContinuationStore.java#L67&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/blob/master/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/BookContinuationStore.java#L67&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can you please prepare a test case, even if it will not fail on every request but randomly, it will be a start...I guess much depends on the servlet container as well, may be which Java version, etc&lt;/p&gt;</comment>
                            <comment id="16275025" author="jbellassai" created="Fri, 1 Dec 2017 21:37:22 +0000"  >&lt;p&gt;Sure, I&apos;ll see what I can come up with.&lt;/p&gt;</comment>
                            <comment id="16275104" author="jbellassai" created="Fri, 1 Dec 2017 22:34:45 +0000"  >&lt;p&gt;I&apos;ve attached a patch that contains a rather rough test case that demonstrates the issue (sometimes).&lt;/p&gt;

&lt;p&gt;When the problem occurs you&apos;ll see the test stall for a bit before a SocketTimeoutException is thrown. You might have to run the test a few times before the error occurs.&lt;/p&gt;</comment>
                            <comment id="16343634" author="sergey_beryozkin" created="Mon, 29 Jan 2018 17:01:10 +0000"  >&lt;p&gt;Sorry for a delay. I&apos;m having problems reproducing it. I&apos;ve updated existing test&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/cxf/blob/master/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/BookContinuationStore.java#L73&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/blob/master/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/BookContinuationStore.java#L73&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as per you patch (removed sleep()) and the client to do it 5000 times, it is just running, quite slow, not sure why, but no any failures.&lt;/p&gt;

&lt;p&gt;It&apos;s quite hard to see where the problem might be, if the application code has called &apos;resume()&apos; before JAXRSInvoker tries to really suspend (and hence return the current thread to the pool) then the async response (or rather its object) is returned on the original thread immediately without even interacting with the Continuation.&lt;/p&gt;

&lt;p&gt;How do you set up the server, is it Jetty, Tomcat. etc ?&lt;/p&gt;

&lt;p&gt;Sergey&lt;/p&gt;


</comment>
                            <comment id="16343978" author="jbellassai" created="Mon, 29 Jan 2018 20:39:29 +0000"  >&lt;p&gt;Hi Sergey,&lt;/p&gt;

&lt;p&gt;No worries on the delay, I know you guys are busy!&lt;/p&gt;

&lt;p&gt;To answer your question, we&apos;re using Spring Boot and doing some&#160;programmatic Tomcat configuration, but this issue appears to be completely independent of that&#160;&#8211; see below.&lt;/p&gt;

&lt;p&gt;I re-applied the patch I provided for this issue again and was able to duplicate the issue almost immediately when running the provided test case. It sounds like you just updated your code manually to look like mine, but I&apos;d suggest just applying the patch if possible to try and match what I&apos;m seeing exactly.&lt;/p&gt;

&lt;p&gt;Anyway, I&apos;ve spent a bit more time today digging in and it looks to me like the race is between &lt;em&gt;AsyncResponseImpl.suspendContinuationIfNeeded()&lt;/em&gt; and &lt;em&gt;AsyncResponseImpl.doResumeFinal()&lt;/em&gt;. If I add the synchronized keyword to the &lt;em&gt;doResumeFinal()&lt;/em&gt; method, my test case passes.&lt;/p&gt;

&lt;p&gt;My best explanation for what is happening is that the thread calling &lt;em&gt;suspendContinuationIfNeeded()&lt;/em&gt; is suspending the Continuation &lt;em&gt;after&lt;/em&gt; the other thread gets into &lt;em&gt;doResumeFinal()&lt;/em&gt; and sets &lt;em&gt;resumedByApplication = true&lt;/em&gt;, but does not set &lt;em&gt;initialSuspend = true&lt;/em&gt;&#160;fast enough, so &lt;em&gt;cont.resume()&lt;/em&gt;&#160;never gets called by the second thread and the response never makes it out. By making &lt;em&gt;doResumeFinal()&lt;/em&gt;&#160;synchronized, this race is eliminated.&lt;/p&gt;

&lt;p&gt;I hope that makes sense. Please let me know if I can help further.&lt;/p&gt;</comment>
                            <comment id="16344127" author="sergey_beryozkin" created="Mon, 29 Jan 2018 22:34:06 +0000"  >&lt;p&gt;Hi John,&lt;br/&gt;
Thanks, the only difference between what I was trying to do and your patch is that in your patch a client has a sync timeout set, I&apos;ll try again, but note the tests are using Jetty...&lt;br/&gt;
Re the possible explanation, I&apos;m still not seeing how that would cause a fault. Lets go step by step. &lt;br/&gt;
1) The original request thread has called the service method and added a Runnable &lt;br/&gt;
2) The original request thread is now calling AsyncResponseImpl.suspendContinuationIfNeeded&lt;br/&gt;
3) In meantime the app thread has run Runnable which called AsyncResponseImpl.resume and set &apos;resumedByApplication&apos; to true and now is checking &apos;isInitialSuspend&apos;...&lt;br/&gt;
4)  At the same time, AsyncResponseImpl.suspendContinuationIfNeeded is called and the first flag which is checked is &apos;resumedByApplication&apos;&lt;/p&gt;

&lt;p&gt;Now if, as part of 3), the app thread has set resumedByApplication first to true, then in 4) the request thread will just return and JAXRSInvoker will return the response&lt;br/&gt;
But if as part of 3) the request thread saw resumedByApplication being still false, then it would assume the continuation would have to be suspended while the app thread, as part of 4), would fail to resume it because the 3) thread has set isInitialSuspend to false in time for the 4) thread to act ... Something like that ?&lt;/p&gt;

&lt;p&gt;I guess adding a sync would be the simplest option, but that would likely lead to &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7037&quot; title=&quot;@Suspended can be broken on tomcat&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7037&quot;&gt;&lt;del&gt;CXF-7037&lt;/del&gt;&lt;/a&gt; ?&lt;/p&gt;

</comment>
                            <comment id="16344444" author="jbellassai" created="Tue, 30 Jan 2018 03:24:32 +0000"  >&lt;p&gt;Sergey,&lt;/p&gt;

&lt;p&gt;Yes, your breakdown is&#160;exactly the situation I was trying to describe.&#160;&#160;&lt;/p&gt;

&lt;p&gt;I followed the trail of &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7037&quot; title=&quot;@Suspended can be broken on tomcat&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7037&quot;&gt;&lt;del&gt;CXF-7037&lt;/del&gt;&lt;/a&gt; and found &lt;a href=&quot;https://www.mail-archive.com/dev@tomcat.apache.org/msg110682.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;this&lt;/a&gt; thread in the Tomcat mailing list in which the bug mentioned in &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7037&quot; title=&quot;@Suspended can be broken on tomcat&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7037&quot;&gt;&lt;del&gt;CXF-7037&lt;/del&gt;&lt;/a&gt; is discussed.&lt;/p&gt;

&lt;p&gt;From what I can tell, the issue in Tomcat was resolved at least in version 8.5.6 (2016-10-10). Here is the relevant paragraph from the &lt;a href=&quot;https://tomcat.apache.org/tomcat-8.5-doc/changelog.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;changelog&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Refactor the code that implements the requirement that a call to complete() or dispatch() made from a non-container thread before the container initiated thread that called startAsync() completes must be delayed until the container initiated thread has completed. Rather than implementing this by blocking the non-container thread, extend the internal state machine to track this. This removes the possibility that blocking the non-container thread could trigger a deadlock. (markt)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So, this would lead me to believe that it&#160;is safe to synchronize the&#160;&lt;em&gt;doResumeFinal&lt;/em&gt; method now, at least as far as Tomcat is concerned.&lt;/p&gt;</comment>
                            <comment id="16344901" author="sergey_beryozkin" created="Tue, 30 Jan 2018 11:20:38 +0000"  >&lt;p&gt;Hi John, this is done now, thanks for your help&lt;/p&gt;</comment>
                            <comment id="16345120" author="jbellassai" created="Tue, 30 Jan 2018 14:34:59 +0000"  >&lt;p&gt;Sergey,&#160;&lt;/p&gt;

&lt;p&gt;Great, thanks for the fix! I just looked at the commit(s) and I&apos;m pretty sure that you don&apos;t want to have removed&#160;&lt;em&gt;volatile&lt;/em&gt; from all of those member variables without adding&#160;&lt;em&gt;synchronized&lt;/em&gt; to all of the methods which&#160;read or write them.&lt;/p&gt;

&lt;p&gt;For example, the&#160;&lt;em&gt;doCancel()&lt;/em&gt; method reads and changes the value of the&#160;&lt;em&gt;cancel&lt;/em&gt; member variable, but if it&apos;s not&#160;&lt;em&gt;synchronized&lt;/em&gt; or&#160;&lt;em&gt;volatile&lt;/em&gt;, there&apos;s no guarantee it will see the most recent value and there&apos;s no guarantee that other threads will see the new value. Basically, you&apos;re asking for trouble.&lt;/p&gt;

&lt;p&gt;If you&apos;re going to&#160;make them non-&lt;em&gt;volatile&lt;/em&gt;&#160;then you&apos;ll probably want to look at revision&#160;005ec0a2ec764f799eb544daa523671109c72a35 and make sure you add&#160;&lt;em&gt;synchronized&lt;/em&gt; back to all the methods&#160;it was removed from in that commit.&lt;/p&gt;

&lt;p&gt;Otherwise, I don&apos;t think there&apos;s a&#160;big problem in leaving them all&#160;&lt;em&gt;volatile&lt;/em&gt; even if some of them are also mutex-ed in a&#160;&lt;em&gt;synchronized&lt;/em&gt; method.&lt;/p&gt;</comment>
                            <comment id="16345124" author="sergey_beryozkin" created="Tue, 30 Jan 2018 14:38:14 +0000"  >&lt;p&gt;Cancel is only expected to be called from the application code... I can add those volatile qualifiers back, but is it really needed ?&lt;/p&gt;</comment>
                            <comment id="16345130" author="sergey_beryozkin" created="Tue, 30 Jan 2018 14:42:34 +0000"  >&lt;p&gt;By the way, I&apos;m aware of the benefit of the synchronization &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, just curious, is it really needed in some cases...&lt;/p&gt;</comment>
                            <comment id="16345146" author="sergey_beryozkin" created="Tue, 30 Jan 2018 14:50:38 +0000"  >&lt;p&gt;Never mind, will just put those qualifiers back, I can imagine, even though not sure how practical that is, that an app thread cancels an async response, while some other request thread checks isCancelled, etc...&lt;/p&gt;</comment>
                            <comment id="16345148" author="jbellassai" created="Tue, 30 Jan 2018 14:51:18 +0000"  >&lt;p&gt;Sergey, I apologize if my comment sounded patronizing, I didn&apos;t mean it that way! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;To be honest, I haven&apos;t studied this class and all of it&apos;s uses in depth, so I delegate to your judgement.&#160;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</comment>
                            <comment id="16345175" author="sergey_beryozkin" created="Tue, 30 Jan 2018 14:58:13 +0000"  >&lt;p&gt;Hi John, &lt;br/&gt;
I def did not took it like that, in general I&apos;m perfectly fine with being advised even on basic fundamentals &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, you were right it was technically not very sound to leave some of these fields unprotected, and sorry if I sounded as if I knew more than I actually do about the Java concurrency &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, the fix is coming shortly &lt;/p&gt;</comment>
                            <comment id="16345211" author="sergey_beryozkin" created="Tue, 30 Jan 2018 15:22:04 +0000"  >&lt;p&gt;Added the qualifiers back; please stress AsyncResponseImpl further &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, putting all the sync qualifiers back is an option, but may be we can postpone it just yet... thanks&lt;/p&gt;</comment>
                            <comment id="16345238" author="jbellassai" created="Tue, 30 Jan 2018 15:36:11 +0000"  >&lt;p&gt;Thanks again, Sergey!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12900295" name="CXF-7575.patch" size="2724" author="jbellassai" created="Fri, 1 Dec 2017 22:32:03 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12314020" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310060" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Estimated Complexity</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10060"><![CDATA[Unknown]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 17 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3ng6f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfields>
    </item>
</channel>
</rss>