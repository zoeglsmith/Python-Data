<!-- 
RSS generated by JIRA (8.20.10#820010-sha1:ace47f9899e9ee25d7157d59aa17ab06aee30d3d) at Sat May 27 09:42:51 UTC 2023

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>8.20.10</version>
        <build-number>820010</build-number>
        <build-date>22-06-2022</build-date>
    </build-info>


<item>
            <title>[CXF-6491] wadl2java produces incorrect Consumes annotation for multiple representations on POST methods</title>
                <link>https://issues.apache.org/jira/browse/CXF-6491</link>
                <project id="12310511" key="CXF">CXF</project>
                    <description>&lt;p&gt;The wadl2java tool, with the supportMultipleXmlReps option, generates the wrong @Consumes annotation values for each of the POST methods that have multiple representations.  The annotation for all of the methods contains all of the media types instead of the single media type that is appropriate for the specific method.&lt;/p&gt;

&lt;p&gt;I&apos;ve tested the versions listed in the affected versions field, but it likely applies to other versions as well.&lt;/p&gt;


</description>
                <environment>&lt;p&gt;CentOS 6.6, Java &lt;br/&gt;
java version &quot;1.7.0_71&quot;&lt;br/&gt;
OpenJDK Runtime Environment (rhel-2.5.3.2.el6_6-x86_64 u71-b14)&lt;br/&gt;
OpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode)&lt;/p&gt;</environment>
        <key id="12843623">CXF-6491</key>
            <summary>wadl2java produces incorrect Consumes annotation for multiple representations on POST methods</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sergey_beryozkin">Sergey Beryozkin</assignee>
                                    <reporter username="colorado-lynchdp">Pat Lynch</reporter>
                        <labels>
                    </labels>
                <created>Wed, 8 Jul 2015 19:48:18 +0000</created>
                <updated>Fri, 14 Oct 2016 14:28:01 +0000</updated>
                            <resolved>Thu, 9 Jul 2015 13:37:22 +0000</resolved>
                                    <version>3.0.2</version>
                    <version>3.0.5</version>
                    <version>3.1.1</version>
                                    <fixVersion>3.0.6</fixVersion>
                    <fixVersion>3.1.2</fixVersion>
                                    <component>Tooling</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                                                                <comments>
                            <comment id="14619251" author="colorado-lynchdp" created="Wed, 8 Jul 2015 19:54:25 +0000"  >&lt;p&gt;The attached files demonstrate the issue.  The tool was run with the following configuration:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;            &amp;lt;plugin&amp;gt;
               &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt;
               &amp;lt;artifactId&amp;gt;cxf-wadl2java-plugin&amp;lt;/artifactId&amp;gt;
               &amp;lt;version&amp;gt;3.0.2&amp;lt;/version&amp;gt;
               &amp;lt;configuration&amp;gt;
                  &amp;lt;sourceRoot&amp;gt;${project.build.directory}/wadl-source&amp;lt;/sourceRoot&amp;gt;
                  &amp;lt;wadlOptions&amp;gt;
                     &amp;lt;wadlOption&amp;gt;
                        &amp;lt;impl&amp;gt;&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;&amp;lt;/impl&amp;gt;
                        &amp;lt;catalog&amp;gt;${internal.catalog.path}&amp;lt;/catalog&amp;gt;
                        &amp;lt;packagename&amp;gt;${client.&lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt;}&amp;lt;/packagename&amp;gt;
                        &amp;lt;extraargs&amp;gt;
                           &amp;lt;extraarg&amp;gt;-verbose&amp;lt;/extraarg&amp;gt;
                           &amp;lt;extraarg&amp;gt;-&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt;&amp;lt;/extraarg&amp;gt;
                           &amp;lt;extraarg&amp;gt;-inheritResourceParams&amp;lt;/extraarg&amp;gt;
                           &amp;lt;extraarg&amp;gt;-supportMultipleXmlReps&amp;lt;/extraarg&amp;gt;
                        &amp;lt;/extraargs&amp;gt;
                     &amp;lt;/wadlOption&amp;gt;
                  &amp;lt;/wadlOptions&amp;gt;
               &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14620502" author="sergey_beryozkin" created="Thu, 9 Jul 2015 13:36:42 +0000"  >&lt;p&gt;Yes, the test source had 2 representations with the same media type application/xml. In general accumulating all the media types works in a case where we have say two reps with application/xml linking to the schema and application/json without a link but a Jettison-based provider still using JAXB to convert JSON to XML and only a single method is generated so it makes sense to do Consumes(application/xml, application/json). However if a method per every representation is to be generated and every rep with the element has a different media types then indeed it becomes confusing...&lt;/p&gt;</comment>
                            <comment id="14621096" author="colorado-lynchdp" created="Thu, 9 Jul 2015 19:12:54 +0000"  >&lt;p&gt;I noticed also that the multiple reps seems to apply only to PUT/POST methods.  When there are multiple representations possible for an OK response to a GET method, only one method is generated and it claims that it @Produces()  all of the media types, yet the return type is only one of the Java types from the possible list of representations.&lt;/p&gt;

&lt;p&gt;Do you want me to create a separate defect for that?  Or handle it with this one?&lt;/p&gt;</comment>
                            <comment id="14621266" author="sergey_beryozkin" created="Thu, 9 Jul 2015 21:08:14 +0000"  >&lt;p&gt;So if we have a POST with multiple n request representations and multiple m response representations and a method is to be generated per every representations then it will become n*m methods. I do not think WADL can describe that a given request rep needs to be matched with a given response rep. In fact now I&apos;m not sure it is a good idea to support multiple request representations with different media types, because how would you describe which representation is to be returned  for a/v1+xml and which one for a/v2+xml, all within a single WADL request/response pair ?&lt;/p&gt;

&lt;p&gt;GET with multiple representations versioned by the media type within the same path - is it really needed ?  &lt;/p&gt;</comment>
                            <comment id="14621303" author="sergey_beryozkin" created="Thu, 9 Jul 2015 21:31:12 +0000"  >&lt;p&gt;Though I guess in POST/PUT cases one can try and match request with response rep by the media type if we have multiple in/out reps withing a single request/response pair, might be worth investigating. The alternative is to tell wadl-to-java to generate Response&lt;/p&gt;</comment>
                            <comment id="14621310" author="colorado-lynchdp" created="Thu, 9 Jul 2015 21:35:19 +0000"  >&lt;p&gt;We definitely need this for our APIs.&lt;/p&gt;</comment>
                            <comment id="14621317" author="colorado-lynchdp" created="Thu, 9 Jul 2015 21:39:05 +0000"  >&lt;p&gt;For the sake of sanity would it make sense to start by limiting the multiple representations to either in or out but not both? Of course I&apos;m speaking from our perspective where this happens to be our current practice.  We usually return a 204 (no content) response from a POST/PUT.&lt;/p&gt;</comment>
                            <comment id="14621341" author="sergey_beryozkin" created="Thu, 9 Jul 2015 21:47:18 +0000"  >&lt;p&gt;For the sake of the sanity the simplest solution is to configure the generator to generate Response return type for a given method. Those who view WADL will see all the information and the client code would simply have to do  Response.readEntity(MyClassV1.class), Response.readEntity(MyClassV2.class).&lt;br/&gt;
Can you open a minor enhancement request to have multiple methods generated for multiple response representations ?&lt;br/&gt;
I won;t be able to prioritize on that issue but might be worth looking at... &lt;/p&gt;</comment>
                            <comment id="14624932" author="colorado-lynchdp" created="Mon, 13 Jul 2015 16:49:17 +0000"  >&lt;p&gt;I&apos;ll create the enhancement request.&lt;/p&gt;

&lt;p&gt;However, I&apos;ve applied your commit to the SourceGenerator and it seems to be ignoring the JSON media types in the @Consumes annotation.&lt;/p&gt;</comment>
                            <comment id="14625205" author="sergey_beryozkin" created="Mon, 13 Jul 2015 19:37:06 +0000"  >&lt;p&gt;Does this JSON representation have an &apos;element&apos; attribute as in the attached WADL file ?&lt;/p&gt;</comment>
                            <comment id="14625208" author="colorado-lynchdp" created="Mon, 13 Jul 2015 19:39:02 +0000"  >&lt;p&gt;Yes&lt;/p&gt;</comment>
                            <comment id="14626896" author="sergey_beryozkin" created="Tue, 14 Jul 2015 19:14:30 +0000"  >&lt;p&gt;Both xml and json representations refer to the same element and the code blocks representations with duplicate elements, if you change the order of reps and put the JSON one first then XML one will not be printed if a method per representation is required, otherwise you&apos;d have a compilation error because two identical Java method elements would be created.&lt;br/&gt;
When you have say a POST method with two reps, then unless a method &apos;id&apos; is set, it is &quot;post&quot; + a given rep element name, a media type does not contribute to the uniqueness of the generated method name.&lt;/p&gt;

&lt;p&gt;I think the clean solution is to have two WADL POST methods with different ids, say, postXml and postJson, with one having only XML reps, the other one - only JSON reps &lt;/p&gt;</comment>
                            <comment id="14626918" author="colorado-lynchdp" created="Tue, 14 Jul 2015 19:33:02 +0000"  >&lt;p&gt;What&apos;s wrong with looping through the list of representations having &quot;element&quot; attributes and collecting all of the ones with the same value (for &quot;element&quot;) and passing that collection to the method that generates the @Consumes annotation?&lt;br/&gt;
This should yield:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@Consumes({&lt;span class=&quot;code-quote&quot;&gt;&quot;application/vnd.plcm.hoho+xml&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;application/vnd.plcm.hoho+json&quot;&lt;/span&gt;})
void createHoho( Hoho hoho );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead, you seem to be only considering the single XML media type:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;requestReps = Collections.singletonList(requestRepWithElement);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14627990" author="sergey_beryozkin" created="Wed, 15 Jul 2015 12:42:50 +0000"  >&lt;p&gt;Well, it seems inconsistent with the idea of a method generated per representation, which is what  &apos;supportMultipleXmlReps&apos; is for (as a side note I&apos;ll need to deprecate it and introduce something like &apos;supportMultipleRepsWithElements&apos; given that JSON reps can be checked too). Also note it is unlikely you&apos;d have a JSON rep linking to a schema element supported at the code gen level outside of CXF...&lt;/p&gt;

&lt;p&gt;Besides, when you have a proxy with two consumes, how would you decide what needs to be sent, JSON or XML ? The option I suggested is a valid WADL, and IMHO easier to read. However, I might consider adding a media type subtype as an additional method name qualifier to make the method names unique in cases like yours...&lt;/p&gt;

</comment>
                            <comment id="14628149" author="colorado-lynchdp" created="Wed, 15 Jul 2015 14:37:51 +0000"  >&lt;p&gt;It actually is consistent provided the represented XML element is the same.  This is exactly how one would write the method by hand.&lt;/p&gt;

&lt;p&gt;The decision is made based on the value of the Accept header in the HTTP request. There are well defined rules with respect to making this decision, see: &lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-5.3.2&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://tools.ietf.org/html/rfc7231#section-5.3.2&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14628182" author="sergey_beryozkin" created="Wed, 15 Jul 2015 14:53:38 +0000"  >&lt;p&gt;It may surprise you but after working on implementing JAX-RS in CXF I have some idea about what Accept is for or that people may combine multiple Consumes in their methods. In fact some people do prefer to have a method per single Consumes. &lt;br/&gt;
I was referring to a case of a user writing a client proxy code...&lt;/p&gt;

&lt;p&gt;Anyway, I&apos;m not willing to do this extra work because it makes things more complex, especially given that a task of linking of request and response representations also needs to be addressed where we have multiple in and multiple out reps. You have a proper alternative available and I will tune the code a bit to add a media subtype to a generated method name.&lt;/p&gt;</comment>
                            <comment id="14628190" author="sergey_beryozkin" created="Wed, 15 Jul 2015 15:00:05 +0000"  >&lt;p&gt;Sorry, I did not mean it is absolutely not an option - despite me being opposed right now - please create a patch and I will review if it makes sense to do it in addition to the basic update I have in mind, but please wait for me updating the code first to ensure linking between multiple in/out reps at the Consumes/Produces level works, before creating your patch because it will need to ensure this linking continues working, thanks&lt;/p&gt;</comment>
                            <comment id="14628192" author="colorado-lynchdp" created="Wed, 15 Jul 2015 15:02:13 +0000"  >&lt;p&gt;Apologies, I should have taken more time to understand what you were asking.&lt;/p&gt;</comment>
                            <comment id="14628211" author="sergey_beryozkin" created="Wed, 15 Jul 2015 15:15:36 +0000"  >&lt;p&gt;No problems and sorry for not resisting to suggesting how great my understanding of Accept is, it is probably very limited &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Thanks for your ideas, I agree some more work needs to be done&lt;/p&gt;</comment>
                            <comment id="14631341" author="sergey_beryozkin" created="Fri, 17 Jul 2015 13:30:54 +0000"  >&lt;p&gt;I&apos;ve done more work to ensure a single Java method is generated per every request representation inside a given WADL method. Accumulating multiple media types on a single method in this case would be much more complex to do, especially with a possible necessity to match such multiple request reps against response reps and I&apos;m not sure it is worth it. &lt;br/&gt;
Besides, as I mentioned earlier, the Java client working with a method with multiple Consumes has no way to choose whether to send XML or JSON, etc, without using a CXF-specific cast of a proxy to (Web)Client and manually setting Accept and if there&apos;s a need to do it then IMHO it is cleaner to have a dedicated method per the specific representation. When supportMultipleXmlReps is not set then the media types are indeed accumulated but when it is set I believe it has to be a single method per rep.&lt;br/&gt;
Have a look please at the updated code, let me know if it produces a compilable source in your case.  &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12744311" name="PlcmHohoResource.java" size="1205" author="colorado-lynchdp" created="Wed, 8 Jul 2015 19:54:25 +0000"/>
                            <attachment id="12744312" name="plcm-hoho-v2.xsd" size="1900" author="colorado-lynchdp" created="Wed, 8 Jul 2015 19:54:25 +0000"/>
                            <attachment id="12744313" name="plcm-hoho-v3.xsd" size="2175" author="colorado-lynchdp" created="Wed, 8 Jul 2015 19:54:25 +0000"/>
                            <attachment id="12744309" name="plcm-hoho.wadl" size="1851" author="colorado-lynchdp" created="Wed, 8 Jul 2015 19:54:25 +0000"/>
                            <attachment id="12744310" name="plcm-hoho.xsd" size="1596" author="colorado-lynchdp" created="Wed, 8 Jul 2015 19:54:25 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12314020" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310060" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Estimated Complexity</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10060"><![CDATA[Unknown]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 46 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2h0fr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfields>
    </item>
</channel>
</rss>