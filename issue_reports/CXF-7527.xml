<!-- 
RSS generated by JIRA (8.20.10#820010-sha1:ace47f9899e9ee25d7157d59aa17ab06aee30d3d) at Sat May 27 09:44:26 UTC 2023

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>8.20.10</version>
        <build-number>820010</build-number>
        <build-date>22-06-2022</build-date>
    </build-info>


<item>
            <title>[CXF-7527] JAXRS UriInfo.getMatchedUris does return matched URIs twice for sub resources</title>
                <link>https://issues.apache.org/jira/browse/CXF-7527</link>
                <project id="12310511" key="CXF">CXF</project>
                    <description>&lt;p&gt;Invoking method &lt;tt&gt;UriInfo.getMatchedURIs()&lt;/tt&gt; return matched resource URI twice when invoked from SubResource method.&lt;/p&gt;

&lt;p&gt;See attachment for a junit test reproducing the issue (=&amp;gt; &lt;tt&gt;testMatchedUrisFromSubResource()&lt;/tt&gt;) &lt;/p&gt;</description>
                <environment></environment>
        <key id="13108290">CXF-7527</key>
            <summary>JAXRS UriInfo.getMatchedUris does return matched URIs twice for sub resources</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="andymc">Andrew J McMurry</assignee>
                                    <reporter username="nlenoire">Nicolas Lenoire</reporter>
                        <labels>
                    </labels>
                <created>Tue, 10 Oct 2017 13:08:33 +0000</created>
                <updated>Wed, 7 Feb 2018 14:51:58 +0000</updated>
                            <resolved>Mon, 27 Nov 2017 19:21:44 +0000</resolved>
                                    <version>3.1.12</version>
                                    <fixVersion>3.2.2</fixVersion>
                    <fixVersion>3.1.15</fixVersion>
                                    <component>JAX-RS</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="16198715" author="sergey_beryozkin" created="Tue, 10 Oct 2017 14:02:24 +0000"  >&lt;p&gt;The attached jar contains the compiled classes only&lt;/p&gt;</comment>
                            <comment id="16198724" author="nlenoire" created="Tue, 10 Oct 2017 14:12:04 +0000"  >&lt;p&gt;Updated jar with source file&lt;/p&gt;</comment>
                            <comment id="16207638" author="sergey_beryozkin" created="Tue, 17 Oct 2017 13:30:50 +0000"  >&lt;p&gt;What confuses me a bit is that the docs clearly state that both the sub-resource locator and sub-resource method are included,&lt;br/&gt;
&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/ws/rs/core/UriInfo.html#getMatchedURIs--&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://docs.oracle.com/javaee/7/api/javax/ws/rs/core/UriInfo.html#getMatchedURIs--&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &quot;Each entry is a relative URI that matched a resource class, a sub-resource method or a sub-resource locator&quot;&lt;/p&gt;

&lt;p&gt;So CXF will add an entry when the locator is reached, and then when the actual subresource resource method is reached. The doc example shows a single URI though, &quot;/foo/bar&quot;, I wonder if it is because the duplicates which follow each other are expected to be collapsed or that a sub-resource locator should not be included (which would contradict to the docs).&lt;/p&gt;

&lt;p&gt;How would RI react to the case where we have &quot;/foo/bar/sub&quot; and BarResource GET method would have &quot;sub&quot;, would it have &quot;/foo&quot; and &quot;/foo/bar/sub&quot; only (thus skipping the subresource locator) or &quot;/foo&quot;, &quot;/foo/bar/&quot; and &quot;/foo/bar/sub&quot; ? &lt;/p&gt;</comment>
                            <comment id="16207705" author="nlenoire" created="Tue, 17 Oct 2017 14:26:15 +0000"  >&lt;p&gt;I think there could be a confusion with the terms &lt;em&gt;sub-resource locator&lt;/em&gt; and &lt;em&gt;sub-resource method&lt;/em&gt;.&lt;br/&gt;
My understanding is that a &lt;em&gt;sub-resource locator&lt;/em&gt; is a method that have a &lt;tt&gt;@Path&lt;/tt&gt; annotation but no &lt;em&gt;request method designator&lt;/em&gt; (e.g. &lt;tt&gt;@GET&lt;/tt&gt;). A &lt;em&gt;sub-resource method&lt;/em&gt; has both. Also BarResource.getBar() method isn&apos;t a &lt;em&gt;sub-resource method&lt;/em&gt;, but a &lt;em&gt;resource method&lt;/em&gt;. See section 3.4.1 of the JAXRS 2.0 specification.&lt;/p&gt;</comment>
                            <comment id="16207719" author="sergey_beryozkin" created="Tue, 17 Oct 2017 14:37:24 +0000"  >&lt;p&gt;Where is the confusion ? FooResource.getBar is a subresource locator. And are you saying if a BarResource is reached via FooResource, BarResource.getBar is not a subresource method ? That said, in the end of the day, what I&apos;m really interested in is how RI handles the case I mentioned. &lt;/p&gt;</comment>
                            <comment id="16207724" author="sergey_beryozkin" created="Tue, 17 Oct 2017 14:39:15 +0000"  >&lt;p&gt;FYI, Path is implicit in the cases where only GET/etc is available&lt;/p&gt;</comment>
                            <comment id="16207795" author="nlenoire" created="Tue, 17 Oct 2017 15:38:14 +0000"  >&lt;p&gt;Yes, that&apos;s at least my understanding of the terminology used in JAXRS: BarResource.getBar is not a subresource method. Therefore, there is no contraction between the doc and the example given for method &lt;tt&gt;UriInfo.getMatchedURIs()&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I don&apos;t know what the RI is actually doing, but IMHO, requesting GET /foo/bar/sub should give: foo/bar/sub, foo/bar, foo. Because as specified by the doc &quot;Each entry is a relative URI that matched a resource class, a sub-resource method or a sub-resource locator&quot;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&quot;foo/bar/sub&quot; =&amp;gt; matching the sub-resource method BarResource.getSub()&lt;/li&gt;
	&lt;li&gt;&quot;foo/bar&quot; =&amp;gt; matching the sub-resource locator FooResource.getBarResource()&lt;/li&gt;
	&lt;li&gt;&quot;foo&quot; =&amp;gt; matching the resource class FooResource&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;My 2cts&lt;/p&gt;</comment>
                            <comment id="16207810" author="sergey_beryozkin" created="Tue, 17 Oct 2017 15:45:08 +0000"  >&lt;p&gt;This is exactly what I expect CXF to report in this case. Which brings me to the actual question, as I haven&apos;t had a chance yet to run the test code you provided, what is reported twice in your case ?&lt;/p&gt;</comment>
                            <comment id="16207825" author="sergey_beryozkin" created="Tue, 17 Oct 2017 15:52:34 +0000"  >&lt;p&gt;By the way I was referring to BarResource.getBar() in the UriInfo.getMatchedUris, which has no .getSub() method, so perhaps both of us got confused, as I was not referring to BarResource.getSub(), but, rather, to BarResource.getBar() having @Path(&quot;sub&quot;)&lt;/p&gt;</comment>
                            <comment id="16208998" author="nlenoire" created="Wed, 18 Oct 2017 08:51:35 +0000"  >&lt;p&gt;According to my test and using the example given in UriInfo.getMatchedURIs(), a request on uri &quot;foo/bar&quot; makes CXF to return: foo/bar, foo/bar, foo&lt;/p&gt;</comment>
                            <comment id="16209041" author="sergey_beryozkin" created="Wed, 18 Oct 2017 09:20:57 +0000"  >&lt;p&gt;Yes, this is what my original source of confusion was about. &lt;/p&gt;

&lt;p&gt;If you now add &quot;/sub&quot; to BarResource.getBar(), then &quot;GET /foo/bar/sub&quot; will go via 1) FooResource resource class - &quot;foo&quot; 2) FooResource.getBarResource() subresource locator - &quot;foo/bar&quot; 3) BarResource.getBar() subresource method - &quot;foo/bar/sub&quot;&lt;/p&gt;

&lt;p&gt;The only difference between the docs example and the above case is that  BarResource.getBar() has Path(&quot;&quot;) in the docs (it&apos;s implicit but could&apos;ve been there) vs Path(&quot;/sub&quot;) in my example &lt;/p&gt;</comment>
                            <comment id="16245909" author="sergey_beryozkin" created="Thu, 9 Nov 2017 16:03:24 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andymc&quot; class=&quot;user-hover&quot; rel=&quot;andymc&quot;&gt;andymc&lt;/a&gt; Hi Andy, what&apos;s your opinion on this one ? thanks&lt;/p&gt;</comment>
                            <comment id="16246524" author="andymc" created="Thu, 9 Nov 2017 21:07:05 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sergey_beryozkin&quot; class=&quot;user-hover&quot; rel=&quot;sergey_beryozkin&quot;&gt;sergey_beryozkin&lt;/a&gt;, this looks like a bug to me.  I modified the test app a little and deployed it to Liberty - when I invoked GET &lt;tt&gt;&lt;a href=&quot;http://localhost:9080/CXF7527/my/resource/aValue/subresource&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://localhost:9080/CXF7527/my/resource/aValue/subresource&lt;/a&gt;&lt;/tt&gt; , I got &lt;tt&gt;/my/resource/aValue/subresource/,/my/resource/aValue/subresource,/my/resource/aValue&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;When I ran in the EE8 RI (Glassfish 5 - keep in mind that this is JAX-RS 2.1, not 2.0, but I don&apos;t recall anything changing in the 2.1 spec wrt UriInfo), I got &lt;tt&gt;my/resource/aValue/subresource,my/resource/aValue&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;I did a little debugging of UriInfoImpl and it looks like it adds &lt;em&gt;essentially&lt;/em&gt; the same path twice.  It loops through the MethodInvocationInfos on the stack - there are two (one for the method on Resource, and one for the SubResource).  The first time through the loop it adds &lt;tt&gt;/my/resource/aValue&lt;/tt&gt; as the CRI&apos;s URI template - then it adds &lt;tt&gt;/my/resource/aValue/subresource&lt;/tt&gt; as the ORI&apos;s URI template - it also sets that as the sumPath.  The second time through (the MethodInvocationInfo for SubResource&apos;s method), there is no CRI URI template (so nothing added), but it finds an ORI URI template of &quot;/&quot; (implicit?) that it appends to the sumPath and then adds it to the List.  I think that is wrong - it should not add the URI that basically is the previous URI plus a &quot;/&quot;.&lt;/p&gt;

&lt;p&gt;I can try to code up a fix for it.&lt;/p&gt;

&lt;p&gt;Thanks, Andy&lt;/p&gt;</comment>
                            <comment id="16246964" author="githubbot" created="Fri, 10 Nov 2017 03:17:47 +0000"  >&lt;p&gt;andymc12 opened a new pull request #337: &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7527&quot; title=&quot;JAXRS UriInfo.getMatchedUris does return matched URIs twice for sub resources&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7527&quot;&gt;&lt;del&gt;CXF-7527&lt;/del&gt;&lt;/a&gt; getMatchedURIs to avoid duplicate URIs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/cxf/pull/337&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/pull/337&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   The UriInfo.getMatchedURIs method currently returns &quot;duplicate&quot; URI&lt;br/&gt;
   entries when called from a method that is not annotated with an&lt;br/&gt;
   @Path annotation. The &quot;duplicate&quot; URI is basically the same URI but&lt;br/&gt;
   with a trailing slash. This was first discovered when using sub&lt;br/&gt;
   resource locators, but could also occur in simpler scenarios (like&lt;br/&gt;
   a resource method annotated with @GET but not @Path). &lt;/p&gt;

&lt;p&gt;   When comparing against the javadoc and the RI, it looks like the&lt;br/&gt;
   URIs we were returning started with a slash, where the RI and&lt;br/&gt;
   javadoc examples do not. This commit removes the starting slash as&lt;br/&gt;
   well.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16247329" author="sergey_beryozkin" created="Fri, 10 Nov 2017 10:29:14 +0000"  >&lt;p&gt;Right, as suggested above in my initial comment, the issue is really about avoiding the duplication of the 2 consecutive URIs.&lt;br/&gt;
Andy, thanks for the fix, does it also cover the case when something like @Path(&quot;&quot;) is actually available, given that you say above it&apos;s the problem when no @Path is available ?&lt;/p&gt;</comment>
                            <comment id="16247412" author="sergey_beryozkin" created="Fri, 10 Nov 2017 12:23:47 +0000"  >&lt;p&gt;That should probably be OK, in CXF having @Path with &quot;&quot; or &quot;/&quot; values is equivalent to having no @Path at all, so your fix should cover it&lt;/p&gt;</comment>
                            <comment id="16247612" author="githubbot" created="Fri, 10 Nov 2017 15:05:09 +0000"  >&lt;p&gt;andymc12 commented on issue #337: &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7527&quot; title=&quot;JAXRS UriInfo.getMatchedUris does return matched URIs twice for sub resources&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7527&quot;&gt;&lt;del&gt;CXF-7527&lt;/del&gt;&lt;/a&gt; getMatchedURIs to avoid duplicate URIs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/cxf/pull/337#issuecomment-343496892&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/pull/337#issuecomment-343496892&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Updated the systests to no longer check for the leading slash.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16247630" author="githubbot" created="Fri, 10 Nov 2017 15:24:19 +0000"  >&lt;p&gt;sberyozkin commented on issue #337: &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7527&quot; title=&quot;JAXRS UriInfo.getMatchedUris does return matched URIs twice for sub resources&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7527&quot;&gt;&lt;del&gt;CXF-7527&lt;/del&gt;&lt;/a&gt; getMatchedURIs to avoid duplicate URIs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/cxf/pull/337#issuecomment-343502023&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/pull/337#issuecomment-343502023&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Interesting, was it not ever test in TCK given the leading slashes have always been there ?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16247631" author="githubbot" created="Fri, 10 Nov 2017 15:24:29 +0000"  >&lt;p&gt;sberyozkin commented on issue #337: &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7527&quot; title=&quot;JAXRS UriInfo.getMatchedUris does return matched URIs twice for sub resources&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7527&quot;&gt;&lt;del&gt;CXF-7527&lt;/del&gt;&lt;/a&gt; getMatchedURIs to avoid duplicate URIs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/cxf/pull/337#issuecomment-343502023&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/pull/337#issuecomment-343502023&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   Interesting, was it not ever tested in TCK given the leading slashes have always been there ?&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16247733" author="githubbot" created="Fri, 10 Nov 2017 16:22:40 +0000"  >&lt;p&gt;andymc12 commented on issue #337: &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7527&quot; title=&quot;JAXRS UriInfo.getMatchedUris does return matched URIs twice for sub resources&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7527&quot;&gt;&lt;del&gt;CXF-7527&lt;/del&gt;&lt;/a&gt; getMatchedURIs to avoid duplicate URIs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/cxf/pull/337#issuecomment-343518296&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/pull/337#issuecomment-343518296&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;   It looks like &quot;we got lucky&quot;.  There are tests in the TCK for getMatchedURIs, but it looks like it only checks for (1) is the name of the resource and the name of the path in the annotation on the method both in the path (but does not check for slashes) and (2) the size of the returned List (however every resource method in the tests also have the Path annotation, so all of the tested scenarios worked - had they tested for a case where there is no Path annotation, we would have failed).&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16247737" author="sergey_beryozkin" created="Fri, 10 Nov 2017 16:26:57 +0000"  >&lt;p&gt;Sounds good, lets get the fix in then &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="16248643" author="githubbot" created="Sat, 11 Nov 2017 20:00:10 +0000"  >&lt;p&gt;andymc12 closed pull request #337: &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7527&quot; title=&quot;JAXRS UriInfo.getMatchedUris does return matched URIs twice for sub resources&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7527&quot;&gt;&lt;del&gt;CXF-7527&lt;/del&gt;&lt;/a&gt; getMatchedURIs to avoid duplicate URIs&lt;br/&gt;
URL: &lt;a href=&quot;https://github.com/apache/cxf/pull/337&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/pull/337&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a PR merged from a forked repository.&lt;br/&gt;
As GitHub hides the original diff on merge, it is displayed below for&lt;br/&gt;
the sake of provenance:&lt;/p&gt;

&lt;p&gt;As this is a foreign pull request (from a fork), the diff is supplied&lt;br/&gt;
below (as it won&apos;t show otherwise due to GitHub magic):&lt;/p&gt;

&lt;p&gt;diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriInfoImpl.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriInfoImpl.java&lt;br/&gt;
index b0909271b9c..effdc68b74e 100644&lt;br/&gt;
&amp;#8212; a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriInfoImpl.java&lt;br/&gt;
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriInfoImpl.java&lt;br/&gt;
@@ -176,7 +176,7 @@ public UriBuilder getRequestUriBuilder() {&lt;br/&gt;
             List&amp;lt;String&amp;gt; uris = new LinkedList&amp;lt;String&amp;gt;();&lt;br/&gt;
             StringBuilder sumPath = new StringBuilder(&quot;&quot;);&lt;br/&gt;
             for (MethodInvocationInfo invocation : stack) {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;List&amp;lt;String&amp;gt; templateObjects = invocation.getTemplateValues();&lt;br/&gt;
+                List&amp;lt;String&amp;gt; templateObjects = invocation.getTemplateValues();&lt;br/&gt;
                 OperationResourceInfo ori = invocation.getMethodInfo();&lt;br/&gt;
                 URITemplate[] paths = {&lt;br/&gt;
                     ori.getClassResourceInfo().getURITemplate(),&lt;br/&gt;
@@ -190,13 +190,15 @@ public UriBuilder getRequestUriBuilder() {&lt;br/&gt;
                     }&lt;br/&gt;
                     uris.add(0, createMatchedPath(paths&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.getValue(), rootObjects, decode));&lt;br/&gt;
                 }&lt;/li&gt;
	&lt;li&gt;for (URITemplate t : paths) {&lt;/li&gt;
	&lt;li&gt;if (t != null) {&lt;/li&gt;
	&lt;li&gt;sumPath.append(&quot;/&quot;).append(t.getValue());&lt;br/&gt;
+                if (paths&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; != null &amp;amp;&amp;amp; paths&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.getValue().length() &amp;gt; 1) {&lt;br/&gt;
+                    for (URITemplate t : paths) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+                        if (t != null) {
+                            sumPath.append(&quot;/&quot;).append(t.getValue());
+                        }                     }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;+                    objects.addAll(templateObjects);&lt;br/&gt;
+                    uris.add(0, createMatchedPath(sumPath.toString(), objects, decode));&lt;br/&gt;
                 }&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;objects.addAll(templateObjects);&lt;/li&gt;
	&lt;li&gt;uris.add(0, createMatchedPath(sumPath.toString(), objects, decode));&lt;br/&gt;
             }&lt;br/&gt;
             return uris;&lt;br/&gt;
         }&lt;br/&gt;
@@ -206,7 +208,11 @@ public UriBuilder getRequestUriBuilder() {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     private static String createMatchedPath(String uri, List&amp;lt;? extends Object&amp;gt; vars, boolean decode) {&lt;br/&gt;
         String uriPath = UriBuilder.fromPath(uri).buildFromEncoded(vars.toArray()).getRawPath();&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return decode ? HttpUtils.pathDecode(uriPath) : uriPath;&lt;br/&gt;
+        uriPath = decode ? HttpUtils.pathDecode(uriPath) : uriPath;&lt;br/&gt;
+        if (uriPath.startsWith(&quot;/&quot;)) 
{
+            uriPath = uriPath.substring(1);
+        }
&lt;p&gt;+        return uriPath;&lt;br/&gt;
     }&lt;br/&gt;
     private String doGetPath(boolean decode, boolean addSlash) {&lt;br/&gt;
         String path = HttpUtils.getPathToMatch(message, addSlash);&lt;br/&gt;
diff --git a/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/UriInfoImplTest.java b/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/UriInfoImplTest.java&lt;br/&gt;
index b2ddc1a5373..60f9df917cd 100644&lt;/p&gt;
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/UriInfoImplTest.java&lt;br/&gt;
+++ b/rt/frontend/jaxrs/src/test/java/org/apache/cxf/jaxrs/impl/UriInfoImplTest.java&lt;br/&gt;
@@ -19,14 +19,24 @@&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; package org.apache.cxf.jaxrs.impl;&lt;/p&gt;

&lt;p&gt;+import java.lang.reflect.Method;&lt;br/&gt;
 import java.net.URI;&lt;br/&gt;
+import java.util.ArrayList;&lt;br/&gt;
 import java.util.List;&lt;/p&gt;

&lt;p&gt;+import javax.ws.rs.GET;&lt;br/&gt;
+import javax.ws.rs.Path;&lt;br/&gt;
 import javax.ws.rs.core.MultivaluedMap;&lt;br/&gt;
 import javax.ws.rs.core.PathSegment;&lt;br/&gt;
+import javax.ws.rs.core.Response;&lt;br/&gt;
 import javax.ws.rs.core.UriInfo;&lt;/p&gt;

&lt;p&gt;+import org.apache.cxf.jaxrs.model.ClassResourceInfo;&lt;br/&gt;
+import org.apache.cxf.jaxrs.model.MethodInvocationInfo;&lt;br/&gt;
+import org.apache.cxf.jaxrs.model.OperationResourceInfo;&lt;br/&gt;
+import org.apache.cxf.jaxrs.model.OperationResourceInfoStack;&lt;br/&gt;
 import org.apache.cxf.jaxrs.model.URITemplate;&lt;br/&gt;
+import org.apache.cxf.jaxrs.utils.AnnotationUtils;&lt;br/&gt;
 import org.apache.cxf.message.Exchange;&lt;br/&gt;
 import org.apache.cxf.message.ExchangeImpl;&lt;br/&gt;
 import org.apache.cxf.message.Message;&lt;br/&gt;
@@ -408,6 +418,151 @@ public void testGetPath() {&lt;/p&gt;

&lt;p&gt;     }&lt;/p&gt;

&lt;p&gt;+    @Path(&quot;foo&quot;)&lt;br/&gt;
+    public static class RootResource {&lt;br/&gt;
+        &lt;br/&gt;
+        @GET&lt;br/&gt;
+        public Response get() &lt;/p&gt;
{
+            return null;
+        }&lt;br/&gt;
+        &lt;br/&gt;
+        @GET&lt;br/&gt;
+        @Path(&quot;bar&quot;)&lt;br/&gt;
+        public Response getSubMethod() {+            return null;+        }
&lt;p&gt;+        &lt;br/&gt;
+        @Path(&quot;sub&quot;)&lt;br/&gt;
+        public SubResource getSubResourceLocator() &lt;/p&gt;
{
+            return new SubResource();
+        }
&lt;p&gt;+    }&lt;br/&gt;
+    &lt;br/&gt;
+    public static class SubResource {&lt;br/&gt;
+        @GET&lt;br/&gt;
+        public Response getFromSub() &lt;/p&gt;
{
+            return null;
+        }&lt;br/&gt;
+        &lt;br/&gt;
+        @GET&lt;br/&gt;
+        @Path(&quot;subSub&quot;)&lt;br/&gt;
+        public Response getFromSubSub() {+            return null;+        }
&lt;p&gt;+    }&lt;br/&gt;
+    &lt;br/&gt;
+    private static ClassResourceInfo getCri(Class&amp;lt;?&amp;gt; clazz, boolean setUriTemplate) {&lt;br/&gt;
+        ClassResourceInfo cri = new ClassResourceInfo(clazz);&lt;br/&gt;
+        Path path = AnnotationUtils.getClassAnnotation(clazz, Path.class);&lt;br/&gt;
+        if (setUriTemplate) &lt;/p&gt;
{
+            cri.setURITemplate(URITemplate.createTemplate(path));
+        }
&lt;p&gt;+        return cri;&lt;br/&gt;
+    }&lt;br/&gt;
+    &lt;br/&gt;
+    private static OperationResourceInfo getOri(ClassResourceInfo cri, String methodName) throws Exception &lt;/p&gt;
{
+        Method method = cri.getResourceClass().getMethod(methodName);
+        OperationResourceInfo ori = new OperationResourceInfo(method, cri);
+        ori.setURITemplate(URITemplate.createTemplate(AnnotationUtils.getMethodAnnotation(method, Path.class)));
+        return ori;
+    }
&lt;p&gt;+    &lt;br/&gt;
+    private static List&amp;lt;String&amp;gt; getMatchedURIs(UriInfo u) {&lt;br/&gt;
+        List&amp;lt;String&amp;gt; matchedUris = u.getMatchedURIs();&lt;br/&gt;
+//        for (String s : matchedUris) &lt;/p&gt;
{
+//            System.out.println(s);
+//        }
&lt;p&gt;+        return matchedUris;&lt;br/&gt;
+    }&lt;br/&gt;
+    &lt;br/&gt;
+    @Test&lt;br/&gt;
+    public void testGetMatchedURIsRoot() throws Exception &lt;/p&gt;
{
+        System.out.println(&quot;testGetMatchedURIsRoot&quot;);
+        Message m = mockMessage(&quot;http://localhost:8080/app&quot;, &quot;/foo&quot;);
+        OperationResourceInfoStack oriStack = new OperationResourceInfoStack();
+        ClassResourceInfo cri = getCri(RootResource.class, true);
+        OperationResourceInfo ori = getOri(cri, &quot;get&quot;);
+        
+        MethodInvocationInfo miInfo = new MethodInvocationInfo(ori, RootResource.class, new ArrayList&amp;lt;String&amp;gt;());
+        oriStack.push(miInfo);
+        m.put(OperationResourceInfoStack.class, oriStack);
+        
+        UriInfoImpl u = new UriInfoImpl(m);
+        List&amp;lt;String&amp;gt; matchedUris = getMatchedURIs(u);
+        assertEquals(1, matchedUris.size());
+        assertTrue(matchedUris.contains(&quot;foo&quot;));
+    }
&lt;p&gt;+    &lt;br/&gt;
+    @Test&lt;br/&gt;
+    public void testGetMatchedURIsRootSub() throws Exception &lt;/p&gt;
{
+        System.out.println(&quot;testGetMatchedURIsRootSub&quot;);
+        Message m = mockMessage(&quot;http://localhost:8080/app&quot;, &quot;/foo/bar&quot;);
+        OperationResourceInfoStack oriStack = new OperationResourceInfoStack();
+        ClassResourceInfo cri = getCri(RootResource.class, true);
+        OperationResourceInfo ori = getOri(cri, &quot;getSubMethod&quot;);
+        
+        MethodInvocationInfo miInfo = new MethodInvocationInfo(ori, RootResource.class, new ArrayList&amp;lt;String&amp;gt;());
+        oriStack.push(miInfo);
+        m.put(OperationResourceInfoStack.class, oriStack);
+        
+        UriInfoImpl u = new UriInfoImpl(m);
+        List&amp;lt;String&amp;gt; matchedUris = getMatchedURIs(u);
+        assertEquals(2, matchedUris.size());
+        assertEquals(&quot;foo/bar&quot;, matchedUris.get(0));
+        assertEquals(&quot;foo&quot;, matchedUris.get(1));
+    }
&lt;p&gt;+    &lt;br/&gt;
+    @Test&lt;br/&gt;
+    public void testGetMatchedURIsSubResourceLocator() throws Exception &lt;/p&gt;
{
+        System.out.println(&quot;testGetMatchedURIsSubResourceLocator&quot;);
+        Message m = mockMessage(&quot;http://localhost:8080/app&quot;, &quot;/foo/sub&quot;);
+        OperationResourceInfoStack oriStack = new OperationResourceInfoStack();
+        ClassResourceInfo rootCri = getCri(RootResource.class, true);
+        OperationResourceInfo rootOri = getOri(rootCri, &quot;getSubResourceLocator&quot;);
+        
+        MethodInvocationInfo miInfo = new MethodInvocationInfo(rootOri, RootResource.class, new ArrayList&amp;lt;String&amp;gt;());
+        oriStack.push(miInfo);
+        
+        ClassResourceInfo subCri = getCri(SubResource.class, false);
+        OperationResourceInfo subOri = getOri(subCri, &quot;getFromSub&quot;);
+        
+        miInfo = new MethodInvocationInfo(subOri, SubResource.class, new ArrayList&amp;lt;String&amp;gt;());
+        oriStack.push(miInfo);
+        m.put(OperationResourceInfoStack.class, oriStack);
+        
+        UriInfoImpl u = new UriInfoImpl(m);
+        List&amp;lt;String&amp;gt; matchedUris = getMatchedURIs(u);
+        assertEquals(2, matchedUris.size());
+        assertEquals(&quot;foo/sub&quot;, matchedUris.get(0));
+        assertEquals(&quot;foo&quot;, matchedUris.get(1));
+    }
&lt;p&gt;+    &lt;br/&gt;
+    @Test&lt;br/&gt;
+    public void testGetMatchedURIsSubResourceLocatorSubPath() throws Exception &lt;/p&gt;
{
+        System.out.println(&quot;testGetMatchedURIsSubResourceLocatorSubPath&quot;);
+        Message m = mockMessage(&quot;http://localhost:8080/app&quot;, &quot;/foo/sub/subSub&quot;);
+        OperationResourceInfoStack oriStack = new OperationResourceInfoStack();
+        ClassResourceInfo rootCri = getCri(RootResource.class, true);
+        OperationResourceInfo rootOri = getOri(rootCri, &quot;getSubResourceLocator&quot;);
+        
+        MethodInvocationInfo miInfo = new MethodInvocationInfo(rootOri, RootResource.class, new ArrayList&amp;lt;String&amp;gt;());
+        oriStack.push(miInfo);
+        
+        ClassResourceInfo subCri = getCri(SubResource.class, false);
+        OperationResourceInfo subOri = getOri(subCri, &quot;getFromSubSub&quot;);
+        
+        miInfo = new MethodInvocationInfo(subOri, SubResource.class, new ArrayList&amp;lt;String&amp;gt;());
+        oriStack.push(miInfo);
+        m.put(OperationResourceInfoStack.class, oriStack);
+        
+        UriInfoImpl u = new UriInfoImpl(m);
+        List&amp;lt;String&amp;gt; matchedUris = getMatchedURIs(u);
+        assertEquals(3, matchedUris.size());
+        assertEquals(&quot;foo/sub/subSub&quot;, matchedUris.get(0));
+        assertEquals(&quot;foo/sub&quot;, matchedUris.get(1));
+        assertEquals(&quot;foo&quot;, matchedUris.get(2));
+    }
&lt;p&gt;+&lt;br/&gt;
     private Message mockMessage(String baseAddress, String pathInfo) &lt;/p&gt;
{
         return mockMessage(baseAddress, pathInfo, null, null);
     }
&lt;p&gt;diff --git a/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java&lt;br/&gt;
index d505e0902d6..b271ea977da 100644&lt;br/&gt;
&amp;#8212; a/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java&lt;br/&gt;
+++ b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSClientServerBookTest.java&lt;br/&gt;
@@ -2598,10 +2598,10 @@ public void testUriInfoMatchedResourcesWithObject() throws Exception {&lt;/p&gt;

&lt;p&gt;     @Test&lt;br/&gt;
     public void testUriInfoMatchedUrisDecode() throws Exception {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;String expected = &quot;[/bookstore/booksubresource/123/chapters/sub/1/matched!uris, &quot;&lt;/li&gt;
	&lt;li&gt;+ &quot;/bookstore/booksubresource/123/chapters/sub/1/, &quot;&lt;/li&gt;
	&lt;li&gt;+ &quot;/bookstore/booksubresource/123/, &quot;&lt;/li&gt;
	&lt;li&gt;+ &quot;/bookstore]&quot;;&lt;br/&gt;
+        String expected = &quot;[bookstore/booksubresource/123/chapters/sub/1/matched!uris, &quot;&lt;br/&gt;
+                          + &quot;bookstore/booksubresource/123/chapters/sub/1/, &quot;&lt;br/&gt;
+                          + &quot;bookstore/booksubresource/123/, &quot;&lt;br/&gt;
+                          + &quot;bookstore]&quot;;&lt;br/&gt;
         getAndCompare(&quot;http://localhost:&quot; + PORT + &quot;/bookstore/&quot;&lt;br/&gt;
                       + &quot;booksubresource/123/chapters/sub/1/matched%21uris?decode=true&quot;, &lt;br/&gt;
                       expected, &quot;text/plain&quot;, &quot;text/plain&quot;, 200);&lt;br/&gt;
@@ -2610,10 +2610,10 @@ public void testUriInfoMatchedUrisDecode() throws Exception {&lt;br/&gt;
     @Test&lt;br/&gt;
     public void testUriInfoMatchedUrisNoDecode() throws Exception {&lt;br/&gt;
         //note &apos;%21&apos; instead of &apos;!&apos;&lt;/li&gt;
	&lt;li&gt;String expected = &quot;[/bookstore/booksubresource/123/chapters/sub/1/matched%21uris, &quot;&lt;/li&gt;
	&lt;li&gt;+ &quot;/bookstore/booksubresource/123/chapters/sub/1/, &quot;&lt;/li&gt;
	&lt;li&gt;+ &quot;/bookstore/booksubresource/123/, &quot;&lt;/li&gt;
	&lt;li&gt;+ &quot;/bookstore]&quot;;&lt;br/&gt;
+        String expected = &quot;[bookstore/booksubresource/123/chapters/sub/1/matched%21uris, &quot;&lt;br/&gt;
+            + &quot;bookstore/booksubresource/123/chapters/sub/1/, &quot;&lt;br/&gt;
+            + &quot;bookstore/booksubresource/123/, &quot;&lt;br/&gt;
+            + &quot;bookstore]&quot;;&lt;br/&gt;
         getAndCompare(&quot;http://localhost:&quot; + PORT + &quot;/bookstore/&quot;&lt;br/&gt;
                       + &quot;booksubresource/123/chapters/sub/1/matched%21uris?decode=false&quot;, &lt;br/&gt;
                       expected,&lt;br/&gt;
diff --git a/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSUriInfoMatchTest.java b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSUriInfoMatchTest.java&lt;br/&gt;
index 5b21a5d456b..92c24004400 100644
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;
		&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
			&lt;li&gt;a/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSUriInfoMatchTest.java&lt;br/&gt;
+++ b/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/JAXRSUriInfoMatchTest.java&lt;br/&gt;
@@ -60,7 +60,7 @@ public void testMatchedUris() throws Exception 
{
         WebClient.getConfig(wc).getHttpConduit().getClient().setReceiveTimeout(100000000L);
         wc.accept(&quot;text/plain&quot;);
         String data = wc.get(String.class);
-        assertEquals(&quot;/my/resource/1/matched/uris,/my/resource/1&quot;, data);
+        assertEquals(&quot;my/resource/1/matched/uris,my/resource/1&quot;, data);
     }
&lt;p&gt;     @Test&lt;br/&gt;
     public void testMatchedUrisParam() throws Exception {&lt;br/&gt;
@@ -69,7 +69,7 @@ public void testMatchedUrisParam() throws Exception &lt;/p&gt;
{
         WebClient.getConfig(wc).getHttpConduit().getClient().setReceiveTimeout(100000000L);
         wc.accept(&quot;text/plain&quot;);
         String data = wc.get(String.class);
-        assertEquals(&quot;/my/resource/1/matched/uris/param,/my/resource/1&quot;, data);
+        assertEquals(&quot;my/resource/1/matched/uris/param,my/resource/1&quot;, data);
     }
&lt;p&gt;     @Test&lt;br/&gt;
     public void testMatchedUrisParam2() throws Exception {&lt;br/&gt;
@@ -78,7 +78,7 @@ public void testMatchedUrisParam2() throws Exception &lt;/p&gt;
{
         WebClient.getConfig(wc).getHttpConduit().getClient().setReceiveTimeout(100000000L);
         wc.accept(&quot;text/plain&quot;);
         String data = wc.get(String.class);
-        assertEquals(&quot;/my/resource/1/matched/uris/param/2,/my/resource/1&quot;, data);
+        assertEquals(&quot;my/resource/1/matched/uris/param/2,my/resource/1&quot;, data);
     }
&lt;p&gt;     @Test&lt;br/&gt;
     public void testMatchedResources() throws Exception {&lt;/p&gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;----------------------------------------------------------------&lt;br/&gt;
This is an automated message from the Apache Git Service.&lt;br/&gt;
To respond to the message, please log on GitHub and use the&lt;br/&gt;
URL above to go to the specific comment.&lt;/p&gt;

&lt;p&gt;For queries about this service, please contact Infrastructure at:&lt;br/&gt;
users@infra.apache.org&lt;/p&gt;</comment>
                            <comment id="16251652" author="andymc" created="Tue, 14 Nov 2017 16:22:36 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nlenoire&quot; class=&quot;user-hover&quot; rel=&quot;nlenoire&quot;&gt;nlenoire&lt;/a&gt; I merged the changes in PR &lt;a href=&quot;https://github.com/apache/cxf/pull/337&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/pull/337&lt;/a&gt;.  Is it possible for you to verify that this resolves the problem for you?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12891268" name="uriinfo-issues.jar" size="13070" author="nlenoire" created="Tue, 10 Oct 2017 14:11:47 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12314020" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310060" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Estimated Complexity</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10060"><![CDATA[Unknown]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 28 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3l2zj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfields>
    </item>
</channel>
</rss>