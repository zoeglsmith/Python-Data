<!-- 
RSS generated by JIRA (8.20.10#820010-sha1:ace47f9899e9ee25d7157d59aa17ab06aee30d3d) at Sat May 27 09:43:43 UTC 2023

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>8.20.10</version>
        <build-number>820010</build-number>
        <build-date>22-06-2022</build-date>
    </build-info>


<item>
            <title>[CXF-2594] No SOAP fault XML elements when a Fault is thrown in the output chain after SAAJOutInterceptor</title>
                <link>https://issues.apache.org/jira/browse/CXF-2594</link>
                <project id="12310511" key="CXF">CXF</project>
                    <description>&lt;p&gt;The attached unit test runs on top of the 2.2.x SVN branch updated from SVN as of now.&lt;/p&gt;

&lt;p&gt;This ticket originated with this thread:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://old.nabble.com/Inflexible-fault-interceptor-chain--td26840876.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://old.nabble.com/Inflexible-fault-interceptor-chain--td26840876.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which I replicate here with comments used for each step:&lt;/p&gt;

&lt;p&gt;Hi All:&lt;/p&gt;

&lt;p&gt;I need to apply an XSL transformation to messages coming out of CXF (our users configure what the XSL looks like.) For a normal (successful) message, I have an interceptor (during Phase.PRE_MARSHAL) that uses the DOM aspect of a message. That works great. BTW, I get to the DOM like this:&lt;/p&gt;

&lt;p&gt;Node node = (Node) message.getContent(List.class).get(0);&lt;/p&gt;

&lt;p&gt;That seems brittle, is there a safer way to get to an aspect of the message I can feed to javax.xml.transform?&lt;/p&gt;

&lt;p&gt;The real issue comes with fault messages because the fault chain uses an XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt;. The fault chain looks like this:&lt;/p&gt;

&lt;p&gt;Chain org.apache.cxf.phase.PhaseInterceptorChain@3015b303. Current flow:&lt;br/&gt;
  setup &lt;span class=&quot;error&quot;&gt;&amp;#91;ServerPolicyOutFaultInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  prepare-send &lt;span class=&quot;error&quot;&gt;&amp;#91;MessageSenderInterceptor, Soap11FaultOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-stream &lt;span class=&quot;error&quot;&gt;&amp;#91;LoggingOutInterceptor, XmlDeclOutInterceptor*, StaxOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-protocol &lt;span class=&quot;error&quot;&gt;&amp;#91;WebFaultOutInterceptor, SOAPHandlerFaultOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  write &lt;span class=&quot;error&quot;&gt;&amp;#91;SoapOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-marshal &lt;span class=&quot;error&quot;&gt;&amp;#91;LogicalHandlerFaultOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  marshal &lt;span class=&quot;error&quot;&gt;&amp;#91;Soap11FaultOutInterceptorInternal&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-stream-ending &lt;span class=&quot;error&quot;&gt;&amp;#91;StaxOutEndingInterceptor, TransformOutFaultInterceptor*&amp;#93;&lt;/span&gt;&lt;br/&gt;
  prepare-send-ending &lt;span class=&quot;error&quot;&gt;&amp;#91;MessageSenderEndingInterceptor&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;FYI, the interceptors marked with * are our own:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;XmlDeclOutInterceptor forces an XML declaration to be written.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;TransformOutFaultInterceptor is where I thought I could transform the fault XML message.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt; looks like this:&lt;/p&gt;

&lt;p&gt;[StreamWriter: class com.ctc.wstx.sw.SimpleNsStreamWriter, underlying outputter: com.ctc.wstx.sw.ISOLatin1XmlWriter@1125cf44&amp;lt;&lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;mailto:com.ctc.wstx.sw.ISOLatin1XmlWriter@1125cf44&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;com.ctc.wstx.sw.ISOLatin1XmlWriter@1125cf44&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/mail_small.gif&quot; height=&quot;12&quot; width=&quot;13&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;The com.ctc.wstx.sw.ISOLatin1XmlWriter wraps a org.apache.cxf.io.CachedOutputStream, which in turns wraps:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;currentStream - LoadingByteArrayOutputStream&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;flowThroughStream - AbstractHTTPDestination$WrappedOutputStream&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All of this to say that when the chain&apos;s interceptors are working with the message&apos;s XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt;, the bytes are cached and written to the wire. It is not possible to catch the fault XML message and change it.&lt;/p&gt;

&lt;p&gt;The only thing I&apos;ve come up with but not implemented yet would be to insert an interceptor before the XML declaration is written and put the XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt; into a temp spot in the message content map, then put a new XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt; on a byte array in its place. A pre-stream-ending interceptor can take those bytes, apply XSL to them and then write them to the original XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt;, before putting the original XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt; back in it original slot in the message content map.&lt;/p&gt;

&lt;p&gt;That seems like big old hack.&lt;/p&gt;

&lt;p&gt;Any ideas on a cleaner solution?&lt;/p&gt;

&lt;p&gt;Thank you,&lt;br/&gt;
Gary Gregory&lt;br/&gt;
Seagull Software&lt;br/&gt;
ggregory@seagullsoftware.com&lt;br/&gt;
www.seagullsoftware.com&lt;/p&gt;
</description>
                <environment>&lt;p&gt;java version &quot;1.6.0_16&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)&lt;/p&gt;

&lt;p&gt;Microsoft Windows &lt;span class=&quot;error&quot;&gt;&amp;#91;Version 6.0.6002&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Apache Maven 2.2.1 (r801777; 2009-08-06 12:16:01-0700)&lt;br/&gt;
Java version: 1.6.0_16&lt;br/&gt;
Java home: C:\Program Files\Java\jdk1.6.0_16\jre&lt;br/&gt;
Default locale: en_US, platform encoding: Cp1252&lt;br/&gt;
OS name: &quot;windows vista&quot; version: &quot;6.0&quot; arch: &quot;amd64&quot; Family: &quot;windows&quot;&lt;/p&gt;

&lt;p&gt;Eclipse 3.6M4:&lt;br/&gt;
Version: 3.6.0&lt;br/&gt;
Build id: I20091210-1301&lt;/p&gt;</environment>
        <key id="12444229">CXF-2594</key>
            <summary>No SOAP fault XML elements when a Fault is thrown in the output chain after SAAJOutInterceptor</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dkulp">Daniel Kulp</assignee>
                                    <reporter username="ggregory">Gary D. Gregory</reporter>
                        <labels>
                    </labels>
                <created>Mon, 28 Dec 2009 00:03:41 +0000</created>
                <updated>Thu, 10 Mar 2011 23:16:49 +0000</updated>
                            <resolved>Thu, 7 Jan 2010 18:48:00 +0000</resolved>
                                    <version>2.2.4</version>
                    <version>2.2.6</version>
                                    <fixVersion>2.1.9</fixVersion>
                    <fixVersion>2.2.6</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                                <comments>
                            <comment id="12794749" author="ggregory@seagullsw.com" created="Mon, 28 Dec 2009 00:04:57 +0000"  >&lt;p&gt;----&lt;del&gt;Original Message&lt;/del&gt;----&lt;br/&gt;
From: Sergey Beryozkin &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;mailto:sberyozk@progress.com&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;sberyozk@progress.com&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/mail_small.gif&quot; height=&quot;12&quot; width=&quot;13&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;br/&gt;
Sent: Friday, December 18, 2009 02:32&lt;br/&gt;
To: users@cxf.apache.org&lt;br/&gt;
Cc: Lee Breisacher; Nikolay Glazyrin&lt;br/&gt;
Subject: Re: Inflexible fault interceptor chain?&lt;/p&gt;

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I&apos;m presuming you use JAXWS.&lt;br/&gt;
Please see a couple of comments inline prefixed with S.B, perhaps they migth help&lt;/p&gt;

&lt;p&gt;cheers, Sergey&lt;/p&gt;

&lt;p&gt;Hi All:&lt;/p&gt;

&lt;p&gt;I need to apply an XSL transformation to messages coming out of CXF (our users configure what the XSL looks like.) For a normal &lt;br/&gt;
(successful) message, I have an interceptor (during Phase.PRE_MARSHAL) that uses the DOM aspect of a message. That works great. BTW, &lt;br/&gt;
I get to the DOM like this:&lt;/p&gt;

&lt;p&gt;Node node = (Node) message.getContent(List.class).get(0);&lt;/p&gt;

&lt;p&gt;That seems brittle, is there a safer way to get to an aspect of the message I can feed to javax.xml.transform?&lt;/p&gt;

&lt;p&gt;&amp;gt;S.B. Perhaps you can inject an out interceptor before the response object (which is a JAXB Bean) is wrapped into DOM ? And then&lt;br/&gt;
use JAXBContext to marshal into an XSLT engine handler and then abort the chain ? JAXBDatabinding keeps the map of existing &lt;br/&gt;
JAXBContexts but I&apos;m not sure how exactly they can be retrieved...&lt;/p&gt;

&lt;p&gt;The real issue comes with fault messages because the fault chain uses an &lt;br/&gt;
XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt;. The fault chain looks like this:&lt;/p&gt;

&lt;p&gt;&amp;gt; S.B : is it possible to catch a Fault before early, and use JAXB to XSLT path again, perhaps by wrapping a Fault in a JAXBContext &lt;br/&gt;
&amp;gt; ?&lt;/p&gt;


&lt;p&gt;Chain org.apache.cxf.phase.PhaseInterceptorChain@3015b303. Current flow:&lt;br/&gt;
  setup &lt;span class=&quot;error&quot;&gt;&amp;#91;ServerPolicyOutFaultInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  prepare-send &lt;span class=&quot;error&quot;&gt;&amp;#91;MessageSenderInterceptor, Soap11FaultOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-stream &lt;span class=&quot;error&quot;&gt;&amp;#91;LoggingOutInterceptor, XmlDeclOutInterceptor*, StaxOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-protocol &lt;span class=&quot;error&quot;&gt;&amp;#91;WebFaultOutInterceptor, SOAPHandlerFaultOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  write &lt;span class=&quot;error&quot;&gt;&amp;#91;SoapOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-marshal &lt;span class=&quot;error&quot;&gt;&amp;#91;LogicalHandlerFaultOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  marshal &lt;span class=&quot;error&quot;&gt;&amp;#91;Soap11FaultOutInterceptorInternal&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-stream-ending &lt;span class=&quot;error&quot;&gt;&amp;#91;StaxOutEndingInterceptor, TransformOutFaultInterceptor*&amp;#93;&lt;/span&gt;&lt;br/&gt;
  prepare-send-ending &lt;span class=&quot;error&quot;&gt;&amp;#91;MessageSenderEndingInterceptor&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;FYI, the interceptors marked with * are our own:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;XmlDeclOutInterceptor forces an XML declaration to be written.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;TransformOutFaultInterceptor is where I thought I could transform the fault XML message.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt; looks like this:&lt;/p&gt;

&lt;p&gt;[StreamWriter: class com.ctc.wstx.sw.SimpleNsStreamWriter, underlying outputter: &lt;br/&gt;
com.ctc.wstx.sw.ISOLatin1XmlWriter@1125cf44&amp;lt;&lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;mailto:com.ctc.wstx.sw.ISOLatin1XmlWriter@1125cf44&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;com.ctc.wstx.sw.ISOLatin1XmlWriter@1125cf44&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/mail_small.gif&quot; height=&quot;12&quot; width=&quot;13&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;The com.ctc.wstx.sw.ISOLatin1XmlWriter wraps a org.apache.cxf.io.CachedOutputStream, which in turns wraps:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;currentStream - LoadingByteArrayOutputStream&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;flowThroughStream - AbstractHTTPDestination$WrappedOutputStream&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All of this to say that when the chain&apos;s interceptors are working with the message&apos;s &lt;br/&gt;
XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt;, the bytes are cached and written to &lt;br/&gt;
the wire. It is not possible to catch the fault XML message and change it.&lt;/p&gt;

&lt;p&gt;The only thing I&apos;ve come up with but not implemented yet would be to insert an interceptor before the XML declaration is written and &lt;br/&gt;
put the XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt; into a temp spot in the message &lt;br/&gt;
content map, then put a new XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt; on a byte &lt;br/&gt;
array in its place. A pre-stream-ending interceptor can take those bytes, apply XSL to them and then write them to the original &lt;br/&gt;
XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt;, before putting the original &lt;br/&gt;
XMLStreamWriter&amp;lt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html&lt;/a&gt;&amp;gt; back in it original slot in the message &lt;br/&gt;
content map.&lt;/p&gt;

&lt;p&gt;That seems like big old hack.&lt;/p&gt;

&lt;p&gt;Any ideas on a cleaner solution?&lt;/p&gt;

&lt;p&gt;Thank you,&lt;br/&gt;
Gary Gregory&lt;br/&gt;
Seagull Software&lt;br/&gt;
ggregory@seagullsoftware.com&lt;br/&gt;
www.seagullsoftware.com&lt;/p&gt;</comment>
                            <comment id="12794750" author="ggregory@seagullsw.com" created="Mon, 28 Dec 2009 00:05:14 +0000"  >&lt;p&gt;----&lt;del&gt;Original Message&lt;/del&gt;----&lt;br/&gt;
From: Daniel Kulp &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;mailto:dkulp@apache.org&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;dkulp@apache.org&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/mail_small.gif&quot; height=&quot;12&quot; width=&quot;13&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;br/&gt;
Sent: Friday, December 18, 2009 07:33&lt;br/&gt;
To: users@cxf.apache.org&lt;br/&gt;
Cc: Gary Gregory; Lee Breisacher; Nikolay Glazyrin&lt;br/&gt;
Subject: Re: Inflexible fault interceptor chain?&lt;/p&gt;


&lt;p&gt;Honestly, the EASIEST way to accomplish this, since you are using soap, is to &lt;br/&gt;
add the SAAJOutInterceptor to the fault chain.  Then, your interceptor would &lt;br/&gt;
live right before it&apos;s &quot;ending&quot; interceptor and do:&lt;/p&gt;

&lt;p&gt;message.getContext(SOAPMessage.class)&lt;/p&gt;

&lt;p&gt;to get the SAAJ model out.   Since the SAAJ model implements the DOM &lt;br/&gt;
interfaces, you can then feed that into an XSLT processor or similar to &lt;br/&gt;
transform it and then set a new version back with the setContent call.&lt;/p&gt;


&lt;p&gt;Dan&lt;/p&gt;</comment>
                            <comment id="12794751" author="ggregory@seagullsw.com" created="Mon, 28 Dec 2009 00:05:46 +0000"  >&lt;p&gt;----&lt;del&gt;Original Message&lt;/del&gt;----&lt;br/&gt;
From: Gary Gregory &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;mailto:GGregory@seagullsoftware.com&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;GGregory@seagullsoftware.com&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/mail_small.gif&quot; height=&quot;12&quot; width=&quot;13&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;br/&gt;
Sent: Monday, December 21, 2009 17:13&lt;br/&gt;
To: Daniel Kulp; users@cxf.apache.org&lt;br/&gt;
Subject: RE: Inflexible fault interceptor chain?&lt;/p&gt;

&lt;p&gt;Hello Dan and all,&lt;/p&gt;

&lt;p&gt;Ok, the SAAJOutInterceptor solution almost worked. The behavior I describe below is the same in CXF 2.2.4 and 2.2.6-SNAPSHOT (as of Saturday&apos;s build). I am not on 2.2.5 due to some bugs that are fixed in 2.2.6. The debugging information I gathered for this message is with 2.2.4.&lt;/p&gt;

&lt;p&gt;I have two scenarios, one works and one does not with the SAAJOutInterceptor solution. &lt;/p&gt;

&lt;p&gt;If a Fault is thrown by a custom interceptor at a certain point in the output chain, the wrong SOAP XML is generated, specifically no SOAP fault XML elements are generated. Let me start by showing what works and why before showing what does not and why.&lt;/p&gt;

&lt;p&gt;In the first scenario, which works, a SoapFault is thrown by our provider&apos;s invoke(SOAPMessage) method under certain conditions, basically if our server detects certain errors. Our provider looks like this:&lt;/p&gt;

&lt;p&gt;@WebServiceProvider&lt;br/&gt;
@ServiceMode(value = Service.Mode.MESSAGE)&lt;br/&gt;
public static class LdeWebServiceProvider implements Provider&amp;lt;SOAPMessage&amp;gt; {&lt;br/&gt;
   @Override&lt;br/&gt;
   public SOAPMessage invoke(SOAPMessage soapRequest) &lt;/p&gt;
{
      ...
      throw new SoapFault(&quot;Our message&quot;, Soap11.getInstance().getReceiver());
   }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;In SAAJOutInterceptor.handleMessage, the local variable saaj is null, so the code path taken builds a SOAP message from scratch and plugs in a W3CDOMStreamWriter. All of the interceptors then write to W3CDOMStreamWriter instead of the default XMLStreamWriter which normally caches and writes to the HTTP wire. The W3CDOMStreamWriter allows me to transform the DOM before it gets on the wire. Great stuff, it works.&lt;/p&gt;

&lt;p&gt;In the second scenario, I test our output feature where in addition to an optional transformation, we have custom interceptors to do optional XML validation before and after the XML transformation. After our provider successfully processed a message, the output chain processing kicks in and looks like this:&lt;/p&gt;

&lt;p&gt;Chain org.apache.cxf.phase.PhaseInterceptorChain@c375934. Current flow:&lt;br/&gt;
  setup &lt;span class=&quot;error&quot;&gt;&amp;#91;PolicyOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-logical &lt;span class=&quot;error&quot;&gt;&amp;#91;SwAOutInterceptor, SoapHeaderOutFilterInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  post-logical &lt;span class=&quot;error&quot;&gt;&amp;#91;SoapPreProtocolOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  prepare-send &lt;span class=&quot;error&quot;&gt;&amp;#91;MessageSenderInterceptor, MessageModeOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-stream &lt;span class=&quot;error&quot;&gt;&amp;#91;LoggingOutInterceptor, XmlDeclOutInterceptor*, AttachmentOutInterceptor, StaxOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-protocol &lt;span class=&quot;error&quot;&gt;&amp;#91;MessageModeOutInterceptorInternal, SAAJOutInterceptor, SOAPHandlerInterceptor, OurWSS4JOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  write &lt;span class=&quot;error&quot;&gt;&amp;#91;SoapOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-marshal &lt;span class=&quot;error&quot;&gt;&amp;#91;LogicalHandlerOutInterceptor, ValidatingOutInterceptor*, TransformOutInterceptor*, ValidatingOutInterceptor*&amp;#93;&lt;/span&gt;&lt;br/&gt;
  marshal &lt;span class=&quot;error&quot;&gt;&amp;#91;BareOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  write-ending &lt;span class=&quot;error&quot;&gt;&amp;#91;SoapOutEndingInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-protocol-ending &lt;span class=&quot;error&quot;&gt;&amp;#91;SAAJOutEndingInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-stream-ending &lt;span class=&quot;error&quot;&gt;&amp;#91;StaxOutEndingInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  prepare-send-ending &lt;span class=&quot;error&quot;&gt;&amp;#91;MessageSenderEndingInterceptor&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The interceptors marked with * are mine:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;XmlDeclOutInterceptor forces the XML declaration to be written.&lt;/li&gt;
	&lt;li&gt;ValidatingOutInterceptor validates XML&lt;/li&gt;
	&lt;li&gt;TransformOutInterceptor transforms XML&lt;/li&gt;
	&lt;li&gt;ValidatingOutInterceptor validates XML&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The problem occurs if XML validation fails (the first validation in this test).&lt;/p&gt;

&lt;p&gt;When the XML validation fails, an exception thrown, caught, and re-thrown as a fault.&lt;/p&gt;

&lt;p&gt;At the start of fault processing, the chain when SAAJOutInterceptor is called looks like this:&lt;/p&gt;

&lt;p&gt;  Chain org.apache.cxf.phase.PhaseInterceptorChain@77c16c5f. Current flow:&lt;br/&gt;
  setup &lt;span class=&quot;error&quot;&gt;&amp;#91;ServerPolicyOutFaultInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  prepare-send &lt;span class=&quot;error&quot;&gt;&amp;#91;MessageSenderInterceptor, Soap11FaultOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-stream &lt;span class=&quot;error&quot;&gt;&amp;#91;LoggingOutInterceptor, XmlDeclOutInterceptor*, StaxOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-protocol &lt;span class=&quot;error&quot;&gt;&amp;#91;WebFaultOutInterceptor, SAAJOutInterceptor, SOAPHandlerFaultOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  write &lt;span class=&quot;error&quot;&gt;&amp;#91;SoapOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-marshal &lt;span class=&quot;error&quot;&gt;&amp;#91;LogicalHandlerFaultOutInterceptor&amp;#93;&lt;/span&gt;&lt;br/&gt;
  marshal &lt;span class=&quot;error&quot;&gt;&amp;#91;Soap11FaultOutInterceptorInternal&amp;#93;&lt;/span&gt;&lt;br/&gt;
  pre-protocol-ending &lt;span class=&quot;error&quot;&gt;&amp;#91;TransformOutFaultInterceptor*&amp;#93;&lt;/span&gt;&lt;br/&gt;
  prepare-send-ending &lt;span class=&quot;error&quot;&gt;&amp;#91;MessageSenderEndingInterceptor&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The interceptors marked with * are mine:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;XmlDeclOutInterceptor forces the XML declaration to be written.&lt;/li&gt;
	&lt;li&gt;TransformOutFaultInterceptor validates XML&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When I step through this SAAJOutInterceptor invocation, the saaj variable is NOT null, so the code path taken is different from what I described above. Instead of a W3CDOMStreamWriter, a dummy XMLStreamWriter is created that throws away whatever is written to it:&lt;/p&gt;

&lt;p&gt;            //as the SOAPMessage already has everything in place, we do not need XMLStreamWriter to write&lt;br/&gt;
            //anything for us, so we just set XMLStreamWriter&apos;s output to a dummy output stream.         &lt;br/&gt;
            XMLStreamWriter origWriter = message.getContent(XMLStreamWriter.class);&lt;br/&gt;
            message.put(ORIGINAL_XML_WRITER, origWriter);&lt;/p&gt;

&lt;p&gt;            XMLStreamWriter dummyWriter = StaxUtils.createXMLStreamWriter(new OutputStream() {&lt;br/&gt;
                    public void write(int b) throws IOException {&lt;br/&gt;
                    }&lt;br/&gt;
                    public void write(byte b[], int off, int len) throws IOException {&lt;br/&gt;
                    }                        &lt;br/&gt;
                });&lt;br/&gt;
            message.setContent(XMLStreamWriter.class, dummyWriter);&lt;/p&gt;

&lt;p&gt;No wonder I get no SOAP fault information back, I get:&lt;/p&gt;

&lt;p&gt;&amp;lt;?xml version=&apos;1.0&apos; encoding=&apos;ISO-8859-1&apos;?&amp;gt;&lt;br/&gt;
&amp;lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&amp;gt;&lt;br/&gt;
	&amp;lt;SOAP-ENV:Header xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&amp;gt;&lt;br/&gt;
		&amp;lt;ais:requestID xmlns:ais=&quot;http://com.seagullsw.appinterface/AppInterfaceServer&quot;&amp;gt;&lt;/p&gt;
{c0a80102-00ce16ad0000010e75da25398002}
&lt;p&gt;&amp;lt;/ais:requestID&amp;gt;&lt;br/&gt;
	&amp;lt;/SOAP-ENV:Header&amp;gt;&lt;br/&gt;
	&amp;lt;SOAP-ENV:Body xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; /&amp;gt;&lt;br/&gt;
&amp;lt;/SOAP-ENV:Envelope&amp;gt;&lt;/p&gt;

&lt;p&gt;Is this a bug? Why would there be a dummy writer put in place? Is there another CXF way to do this?&lt;/p&gt;

&lt;p&gt;Thank you,&lt;br/&gt;
Gary&lt;/p&gt;
</comment>
                            <comment id="12794752" author="ggregory@seagullsw.com" created="Mon, 28 Dec 2009 00:06:02 +0000"  >&lt;p&gt;----&lt;del&gt;Original Message&lt;/del&gt;----&lt;br/&gt;
From: Daniel Kulp &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;mailto:dkulp@apache.org&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;dkulp@apache.org&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/mail_small.gif&quot; height=&quot;12&quot; width=&quot;13&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;br/&gt;
Sent: Tuesday, December 22, 2009 10:06&lt;br/&gt;
To: users@cxf.apache.org&lt;br/&gt;
Cc: Gary Gregory&lt;br/&gt;
Subject: Re: Inflexible fault interceptor chain?&lt;/p&gt;


&lt;p&gt;Can you create a small test case and attach to a jira?&lt;/p&gt;

&lt;p&gt;This definitely sounds like bug of some sort.   When I redid the Provider &lt;br/&gt;
based services, I noticed that strange code in the StaxOutInterceptor as well &lt;br/&gt;
and tried to remove it.   However, that broke some of the JAX-WS tck tests.   &lt;br/&gt;
I don&apos;t remember the exact reason.   I think it has something to do with &lt;br/&gt;
faults thrown from the logical or soap handlers on the outgoing chain needed &lt;br/&gt;
some strange and wacky processing.     Don&apos;t really remember.   &lt;/p&gt;

&lt;p&gt;If we can get your test case, we may be able to get it to work better.   &lt;/p&gt;

&lt;p&gt;That said, you could probably write your own interceptor (you seem to be good &lt;br/&gt;
at that &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  that would run on the fault chain prior to the SAAJOut and have &lt;br/&gt;
it remove the SAAJ model from the message.   You may need to trace through a &lt;br/&gt;
couple other interceptors (like SoapOutInterceptor) to see if other properties &lt;br/&gt;
need to be removed/reset.&lt;/p&gt;

&lt;p&gt;Dan&lt;/p&gt;
</comment>
                            <comment id="12794753" author="ggregory@seagullsw.com" created="Mon, 28 Dec 2009 00:06:30 +0000"  >&lt;p&gt;----&lt;del&gt;Original Message&lt;/del&gt;----&lt;br/&gt;
From: Gary Gregory &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;mailto:GGregory@seagullsoftware.com&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;GGregory@seagullsoftware.com&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/mail_small.gif&quot; height=&quot;12&quot; width=&quot;13&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;br/&gt;
Sent: Tuesday, December 22, 2009 13:31&lt;br/&gt;
To: Daniel Kulp; users@cxf.apache.org&lt;br/&gt;
Subject: RE: Inflexible fault interceptor chain?&lt;/p&gt;

&lt;p&gt;Hi All:&lt;/p&gt;

&lt;p&gt;I am trying to build SVN 2.2.x (I just updated from SVN) to test a patch (I do not have a test yet) just to see what happens if SAAJOutInterceptor uses a W3CDOMStreamWriter even if the local variable is null. Since that caused a test to hang I thought I&apos;d try to build an unchanged 2.2.6 as a baseline. I get the errors below when I run:&lt;/p&gt;

&lt;p&gt;mvn clean install -Peverything&lt;/p&gt;

&lt;p&gt;Does 2.2.x build ok for anyone out there?&lt;/p&gt;

&lt;p&gt;Results :&lt;/p&gt;

&lt;p&gt;Failed tests:&lt;br/&gt;
  testExcludeNSWithPackageName(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testBug305924ForNestedBinding(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testParameterOrderNoOutputMessage(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testParameterOrderDifferentNS(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;/p&gt;

&lt;p&gt;Tests in error:&lt;br/&gt;
  testHelloWorldExternalBindingFile(org.apache.cxf.tools.wsdlto.jaxws.CodeGenOptionTest)&lt;br/&gt;
  testFlagForGenStandAlone(org.apache.cxf.tools.wsdlto.jaxws.CodeGenOptionTest)&lt;br/&gt;
  testFlagForGenAdditional(org.apache.cxf.tools.wsdlto.jaxws.CodeGenOptionTest)&lt;br/&gt;
  testHeaderFromAnotherMessage1(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testHeaderFromAnotherMessage2(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testHeaderFromAnotherMessage3(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testHeaderFromAnotherMessage4(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testHeaderFromAnotherMessage5(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testRPCLit(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testAsyncMethod(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testAsyncMethodNoService(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testHelloWorldSoap12(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testHelloWorld(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testHelloWorldWithDummyPlugin(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testDocLitHolder(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testSchemaImport(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testExceptionNameCollision(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testAllNameCollision(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testImportNameCollision(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testSoapHeader(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testHolderHeader(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testWSAddress(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testVoidInOutMethod(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testWsdlImport(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testWebFault(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testMultiSchemaParsing(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testDefaultParameterOrder(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testSupportXMLBindingBare(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testSupportXMLBindingWrapped(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testRouterWSDL(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testWSDLContainsJavaKeywords(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testWSDLWithEnumType(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testSWAMime(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testRPCHeader(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testRefTNS(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testWebFaultAnnotaion(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testGlobalBinding(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testXmlSeeAlso(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testWSAction(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testHandlerAnnotation(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testGenerateXmlListAnno(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testWrapperWithWildcard(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testCXF1950(org.apache.cxf.tools.wsdlto.jaxws.CodeGenTest)&lt;br/&gt;
  testLogicalOnlyWSDL(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testBug305729(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testBug305773(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testBug305700(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testNamespacePackageMapping1(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testNamespacePackageMapping2(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testNamespacePackageMapping3(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testBug305772(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testCommandLine(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testLocatorWithJaxbBinding(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testWsdlNoService(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testNoServiceImport(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testServiceNS(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testNoServiceNOPortType(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testDefatultNsMap(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testDefatultNsMapExclude(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testHelloWorldExternalBindingFile(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testWebResult(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testCXF627(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testRecursiveImport(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testCXF804(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testDefinieServiceName(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testAntFile(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testAsyncImplAndClient(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testZeroInputOutOfBandHeader(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testBindingForImportWSDL(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testReuseJaxwsBindingFile(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testBindingXPath(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testJaxbCatalog(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testCatalog2(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testCatalog3(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testServer(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testTwoJaxwsBindingFile(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testJaxwsBindingJavaDoc(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testWSAActionAnno(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testCXF964(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testCXF1620(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testCXF1048(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)&lt;br/&gt;
  testJaxbNpa(org.apache.cxf.tools.wsdlto.jaxb.JAXBCodeGenOptionTest)&lt;/p&gt;

&lt;p&gt;Tests run: 124, Failures: 4, Errors: 82, Skipped: 1&lt;/p&gt;</comment>
                            <comment id="12794754" author="ggregory@seagullsw.com" created="Mon, 28 Dec 2009 00:06:45 +0000"  >&lt;p&gt;----&lt;del&gt;Original Message&lt;/del&gt;----&lt;br/&gt;
From: Daniel Kulp &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;mailto:dkulp@apache.org&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;dkulp@apache.org&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/mail_small.gif&quot; height=&quot;12&quot; width=&quot;13&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;br/&gt;
Sent: Tuesday, December 22, 2009 19:51&lt;br/&gt;
To: users@cxf.apache.org&lt;br/&gt;
Cc: Gary Gregory&lt;br/&gt;
Subject: Re: Inflexible fault interceptor chain?&lt;/p&gt;

&lt;p&gt;On Tue December 22 2009 4:30:30 pm Gary Gregory wrote:&lt;br/&gt;
&amp;gt; Hi All:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I am trying to build SVN 2.2.x (I just updated from SVN) to test a patch (I&lt;br/&gt;
&amp;gt;  do not have a test yet) just to see what happens if SAAJOutInterceptor&lt;br/&gt;
&amp;gt;  uses a W3CDOMStreamWriter even if the local variable is null. Since that&lt;br/&gt;
&amp;gt;  caused a test to hang I thought I&apos;d try to build an unchanged 2.2.6 as a&lt;br/&gt;
&amp;gt;  baseline. I get the errors below when I run:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; mvn clean install -Peverything&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Does 2.2.x build ok for anyone out there?&lt;/p&gt;

&lt;p&gt;The automatic builds we have running in Hudson seem to be fine:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hudson.zones.apache.org/hudson/view/CXF/&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://hudson.zones.apache.org/hudson/view/CXF/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They also just worked for me.   Not sure what to suggest.   &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;



&lt;p&gt;Dan&lt;/p&gt;
</comment>
                            <comment id="12794755" author="ggregory@seagullsw.com" created="Mon, 28 Dec 2009 00:11:59 +0000"  >&lt;p&gt;The patch contains:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;1 unit test class&lt;/li&gt;
	&lt;li&gt;1 servlet mimicking our runtime code&lt;/li&gt;
	&lt;li&gt;1 input test fixture&lt;/li&gt;
	&lt;li&gt;1 output test fixture&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The @Test method &lt;tt&gt;testSAAJOutInterceptorBroken&lt;/tt&gt; fails and demonstrates the bug.&lt;/p&gt;

&lt;p&gt;The @Test method &lt;tt&gt;testSAAJOutInterceptorIncompleteHackBreaksOtherTests&lt;/tt&gt; passes and shows a workaround hack that works in this instance but breaks tests in the CXF build.&lt;/p&gt;</comment>
                            <comment id="12795465" author="ggregory@seagullsw.com" created="Wed, 30 Dec 2009 22:05:16 +0000"  >&lt;p&gt;I tested again today with the lasted from SVN to make sure the test behaved the same, it does.&lt;/p&gt;</comment>
                            <comment id="12797272" author="ggregory@seagullsw.com" created="Wed, 6 Jan 2010 19:45:15 +0000"  >&lt;p&gt;I tested again today with the lasted from SVN to make sure the test behaved the same, it does. &lt;/p&gt;</comment>
                            <comment id="12797734" author="dkulp" created="Thu, 7 Jan 2010 18:48:00 +0000"  >&lt;p&gt;&lt;br/&gt;
Needed some extra cleanup in the SAAJOut handleFault method.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12429001" name="patch.txt" size="32467" author="ggregory@seagullsw.com" created="Mon, 28 Dec 2009 00:11:59 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12314020" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>113996</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            13 years, 22 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1404v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>231484</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfields>
    </item>
</channel>
</rss>