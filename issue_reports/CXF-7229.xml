<!-- 
RSS generated by JIRA (8.20.10#820010-sha1:ace47f9899e9ee25d7157d59aa17ab06aee30d3d) at Sat May 27 09:46:19 UTC 2023

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>8.20.10</version>
        <build-number>820010</build-number>
        <build-date>22-06-2022</build-date>
    </build-info>


<item>
            <title>[CXF-7229] ClassHelper usages not replacable by ClassUnwrapper</title>
                <link>https://issues.apache.org/jira/browse/CXF-7229</link>
                <project id="12310511" key="CXF">CXF</project>
                    <description>&lt;p&gt;ClassUnwrapper and ClassHelper are pretty close and for an app setting a single one should be enough (in particular cause ClassHelper overriding is hacky)&lt;/p&gt;

&lt;p&gt;Spotted org.apache.cxf.jaxrs.utils.InjectionUtils#getRawResponseClass for instance&lt;/p&gt;</description>
                <environment></environment>
        <key id="13037608">CXF-7229</key>
            <summary>ClassHelper usages not replacable by ClassUnwrapper</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="reta">Andriy Redko</assignee>
                                    <reporter username="romain.manni-bucau">Romain Manni-Bucau</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Jan 2017 08:04:28 +0000</created>
                <updated>Thu, 4 Apr 2019 20:17:42 +0000</updated>
                            <resolved>Thu, 4 Apr 2019 20:17:30 +0000</resolved>
                                    <version>3.2.8</version>
                    <version>3.3.1</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                                                                <comments>
                            <comment id="15837605" author="sergey_beryozkin" created="Wed, 25 Jan 2017 11:49:22 +0000"  >&lt;p&gt;Not sure there&apos;s much we can do here, I did not even know CXF ClassUnwrapper interface existed, I checked, looks like the idea is to register 3rd-party class unwrappers (as a bus property) and a default ClassHelper implementation will delegate to it if it is available&lt;/p&gt;</comment>
                            <comment id="15837611" author="romain.manni-bucau" created="Wed, 25 Jan 2017 11:55:25 +0000"  >&lt;p&gt;there still are some cases where classhelper is used but not the unwrapper. Since unwrapper is per bus it should always override the helper which is static (and not designed to be overriden). Idea of this task is to ensure ClassHelper can be deleted and replaced by a default unwrapper more or less to ensure applications setting an unwrapper doesnt need to hack the helper as well. It is typically the case for the response (if you return a proxied jpa entity for instance your unwrapper is bypassed)&lt;/p&gt;</comment>
                            <comment id="15837617" author="sergey_beryozkin" created="Wed, 25 Jan 2017 12:01:29 +0000"  >&lt;p&gt;Hi Romain, you do not need to hack ClassHelper but register ClassUnwrapper as a bus property, dynamically if needed.&lt;/p&gt;

&lt;p&gt;As far as the code you referred to, does it actually affect some test result ? I&apos;d like to see it if possible&lt;/p&gt;

&lt;p&gt;thanks&lt;/p&gt;</comment>
                            <comment id="15837694" author="romain.manni-bucau" created="Wed, 25 Jan 2017 12:59:11 +0000"  >&lt;p&gt;yep, assume you have MyEntity which is proxied and the proxy lib has the awesome idea to remove annotation (or not propagate them to the proxy which is 50% of the impl for good and bad reasons). You will do:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; entities.find(1); &lt;span class=&quot;code-comment&quot;&gt;// returns MyEntity proxy&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then you hit the referenced method (&lt;a href=&quot;https://github.com/apache/cxf/blob/master/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java#L1400&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/blob/master/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java#L1400&lt;/a&gt;) which calls getRealClassFromClass which calls getRealClassFromClassInternal which bypasses any unwrapper logic (&lt;a href=&quot;https://github.com/apache/cxf/blob/master/core/src/main/java/org/apache/cxf/common/util/ClassHelper.java#L60&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/blob/master/core/src/main/java/org/apache/cxf/common/util/ClassHelper.java#L60&lt;/a&gt;) since getRealClass(Bus bus, Object o) is not used. Also think it would be better to pass the bus in that call just in case the thread local is not set&lt;/p&gt;</comment>
                            <comment id="15837715" author="sergey_beryozkin" created="Wed, 25 Jan 2017 13:19:04 +0000"  >&lt;p&gt;That method - I must&apos;ve added it to bypass Spring AOP Cglib issues, I can see it from Spring ClassHelper, otherwise it just returns the actual &apos;cls&apos;. &lt;br/&gt;
I don&apos;t see though that &apos;unwrapping&apos; the class is needed for the response serialization, as far as the runtime is concerned.&lt;br/&gt;
This code is only used twice, once in the ContainerResponseContext implementation, and once - during the serialization.&lt;br/&gt;
So I&apos;d like to ask: do you actually &lt;b&gt;see&lt;/b&gt; something failing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ? Or you only think it will fail ?&lt;br/&gt;
thanks&lt;/p&gt;</comment>
                            <comment id="15837727" author="romain.manni-bucau" created="Wed, 25 Jan 2017 13:28:40 +0000"  >&lt;p&gt;I have cases where it can fail, they are a bit boderline but easy to reproduce: just use a CDI applicationScoped bean representing a constant exposed to the client (done sometimes to return a server configuration which is constant for the app but dynamic by instance) and which depends on some writer annotations and you will get this issue.&lt;/p&gt;</comment>
                            <comment id="15837754" author="sergey_beryozkin" created="Wed, 25 Jan 2017 13:45:28 +0000"  >&lt;p&gt;Hi Romain, &lt;br/&gt;
what will be passed to the MessageBodyWriter is the actual object instance and its actual whatever it is object class.&lt;br/&gt;
It is difficult to prioritize on fixing a problem which I&apos;ve no idea how to reproduce - I have a 0 experience with CDI. Just adding the object check instead will be more expensive for ex in case of Spring hence if we do need to change it then we really need a strong reason for it. &lt;br/&gt;
Can you add a disabled test to CXF CDI test ? Or create some test project ? &lt;/p&gt;</comment>
                            <comment id="15837759" author="sergey_beryozkin" created="Wed, 25 Jan 2017 13:49:18 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=reta&quot; class=&quot;user-hover&quot; rel=&quot;reta&quot;&gt;reta&lt;/a&gt;, Hey Andriy, can you please work with Romain on trying to have a disabled CXF CDI test added which can reproduce a problem ? Thanks&lt;/p&gt;</comment>
                            <comment id="15837774" author="romain.manni-bucau" created="Wed, 25 Jan 2017 14:00:56 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sergeyb&quot; class=&quot;user-hover&quot; rel=&quot;sergeyb&quot;&gt;sergeyb&lt;/a&gt; this is not CDI specific, CDI is just where it comes from for me. You get the same with spring or plain standalone apps.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@Inject &lt;span class=&quot;code-comment&quot;&gt;// or whatever way to get a proxy
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; ProxyWithoutAnnotation value;

@GET ProxyWithoutAnnotation get() { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; value; }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;if the writer needs an annotation on value it will be broken.&lt;/p&gt;</comment>
                            <comment id="15837782" author="sergey_beryozkin" created="Wed, 25 Jan 2017 14:06:35 +0000"  >&lt;p&gt;Hi Romain, sure, I&apos;ll check a Spring proxy test we have but a bit later on...&lt;/p&gt;</comment>
                            <comment id="15840498" author="reta" created="Thu, 26 Jan 2017 21:35:42 +0000"  >&lt;p&gt;Hey Sergey,&lt;/p&gt;

&lt;p&gt;I am attaching a simple test case to illustrate how to reproduce the issue. It is a little bit ad-hoc, but the same result could be achieved using f.e. @Inject or @Autowired annotations, when the proxy is returned instead of real object. &lt;/p&gt;

&lt;p&gt;The test case is failing right now, the proxy object is not serialized into its proxied instance.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;

&lt;p&gt;Best Regards,&lt;br/&gt;
    Andriy Redko&lt;/p&gt;</comment>
                            <comment id="15842469" author="sergey_beryozkin" created="Fri, 27 Jan 2017 09:58:07 +0000"  >&lt;p&gt;Hi Andriy, thanks, perhaps we can do something for CXF 3.1.11.&lt;/p&gt;

&lt;p&gt;Looking at your test, what exactly is failing there, the possible issue, as far as I understand,  is that if Book class may have some annotations which are relevant for the write process can be missed. FYI, &apos;prototype&apos; is not supported in the way you configured it (needs to go with Spring resource factory), is &apos;prototype&apos; relevant in this test ?&lt;br/&gt;
thanks, Sergey&lt;/p&gt;</comment>
                            <comment id="15842502" author="romain.manni-bucau" created="Fri, 27 Jan 2017 10:17:52 +0000"  >&lt;p&gt;Yes that&apos;s the case, suppose you use jaxb and the serializer you use needs @XmlElement on getPrice() but you return through 7 stacks of frameworks (actually 2-3 in real life) a proxy which drops the annotations then CXF will be lost until it uses the unwrapped class.&lt;/p&gt;</comment>
                            <comment id="15842680" author="reta" created="Fri, 27 Jan 2017 12:23:21 +0000"  >&lt;p&gt;Hey Sergey,&lt;/p&gt;

&lt;p&gt;Sorry, the &apos;prototype&apos; is not important here, but the test case fails right now because of the instance of Book class serialization. The message body writer (Jackson) returns JSON-serialized proxy class instance (the JUnit assert shows that) instead of Book instance.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;org.junit.ComparisonFailure: expected:&amp;lt;{[ &lt;span class=&quot;code-quote&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;code-quote&quot;&gt;&quot;Sample Book&quot;&lt;/span&gt;]}&amp;gt; but was:&amp;lt;{[&lt;span class=&quot;code-quote&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;Sample Book&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;frozen&quot;&lt;/span&gt;:&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;targetClass&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.cxf.systest.jaxrs.spring.Book&quot;&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;targetSource&quot;&lt;/span&gt;:{&lt;span class=&quot;code-quote&quot;&gt;&quot;target&quot;&lt;/span&gt;:{&lt;span class=&quot;code-quote&quot;&gt;&quot;title&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;Sample Book&quot;&lt;/span&gt;},&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt;&quot;&lt;/span&gt;:&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;targetClass&quot;&lt;/span&gt;:&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.cxf.systest.jaxrs.spring.Book&quot;&lt;/span&gt;},&lt;span class=&quot;code-quote&quot;&gt;&quot;exposeProxy&quot;&lt;/span&gt;:&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;proxiedInterfaces&quot;&lt;/span&gt;:[],&lt;span class=&quot;code-quote&quot;&gt;&quot;proxyTargetClass&quot;&lt;/span&gt;:&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;preFiltered&quot;&lt;/span&gt;:&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;code-quote&quot;&gt;&quot;advisors&quot;&lt;/span&gt;:[]]}&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another interesting edge case is usage of annotations: the Book instance is annotated using @JsonIgnore for `id` field. However the test case does not progress to this point yet due to improper serialization.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;

&lt;p&gt;Best Regards,&lt;br/&gt;
    Andriy Redko&lt;/p&gt;</comment>
                            <comment id="15842711" author="sergey_beryozkin" created="Fri, 27 Jan 2017 12:30:03 +0000"  >&lt;p&gt;Hi Andriy&lt;/p&gt;

&lt;p&gt;I don&apos;t think CXF JAXRS needs to go into unwrapping the actual object - that is out of scope, we do not do it in CXF at any point at the runtime level. That is the job for custom MBWs to figure out what they need to do with a given object, the fact a generic writer like Jackson exposes the extra properties is not an issue for CXF.&lt;/p&gt;

&lt;p&gt;Can you check please if it sees the annotations ? thanks &lt;/p&gt;</comment>
                            <comment id="15842810" author="sergey_beryozkin" created="Fri, 27 Jan 2017 12:56:08 +0000"  >&lt;p&gt;Just to clarify, the proxified object may be exactly what is needed for the serialization process, ex, some Weaver may augment the object with the extra properties, we do not know at the runtime level what the intention is. The question if the class level annotations make it to the MBW &lt;/p&gt;</comment>
                            <comment id="15842836" author="romain.manni-bucau" created="Fri, 27 Jan 2017 13:02:29 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sergeyb&quot; class=&quot;user-hover&quot; rel=&quot;sergeyb&quot;&gt;sergeyb&lt;/a&gt; well the MBW impl could do it...means they ALL need to have the support for ALL possible proxies. CXF introduces Class&lt;span class=&quot;error&quot;&gt;&amp;#91;Unwrapper|Helper&amp;#93;&lt;/span&gt; concept to ensure you can set it and integrate with any 3rd party frameworks transparently. I think it is an awesome CXF feature and would be very beneficial there. Worse case the unwrapping is very cheap (getClass().getName().contains(&quot;...&quot;) only) and doesn&apos;t affect perf but it enables several cases so I still think it does worth it. Side note: this issue is more about the consistency of the unwrapper usage (which is a SPI vs the hardcoded helper), the other one is about the unwrapping need.&lt;/p&gt;</comment>
                            <comment id="15842843" author="sergey_beryozkin" created="Fri, 27 Jan 2017 13:05:35 +0000"  >&lt;p&gt;CXF does not unwrap the actual proxy object, it is out of its &apos;permit&apos;. The question of needing to unwrap the classes is indeed open, but we need a test confirming it is required &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                            <comment id="15842851" author="romain.manni-bucau" created="Fri, 27 Jan 2017 13:11:56 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sergeyb&quot; class=&quot;user-hover&quot; rel=&quot;sergeyb&quot;&gt;sergeyb&lt;/a&gt; we do know since there is or not the unwrapper. If the unwrapper is there any object should go through it IMHO, if not there your proposal is more than valid as default.&lt;/p&gt;</comment>
                            <comment id="15842864" author="sergey_beryozkin" created="Fri, 27 Jan 2017 13:22:14 +0000"  >&lt;p&gt;That has never been a problem with CXF JAX-RS, and why should we start unwrapping them all now ? That may break some custom MBWs which do expect the objects in the form returned by the service code. And any custom MBW which does need to unwrap the object can do it itself anyway it is not a CXF-level decision because it does not know how the object is expected to processed by a custom MBW. We can do an optional unwrapping of the object before passing to MBW but ClassUnwrapper does not even have a method yet for unwrapping the objects, hence we&apos;d break those who have already implemented CXF ClassUnwrapper. &lt;/p&gt;

&lt;p&gt;IMHO, the issue which may indeed need to be fixed is to prevent a loss of the custom annotations. &lt;/p&gt;

</comment>
                            <comment id="15842869" author="romain.manni-bucau" created="Fri, 27 Jan 2017 13:28:20 +0000"  >&lt;p&gt;The loss of custom annotations is expected by several frameworks so this is not something which will change I fear (or that CXF can control). Regarding your point, if you take my previous answer you will see it is ok since the MBW will keep current behavior by default until an unwrapper is register and in such a case the unwrapping belongs to the impl so it sounds perfectly valid to me. Most of the time the unwrapper will remove well know proxies the MBW will never handle like spring, weld, owb proxies. If you worry about this case (once again I think the risk it breaks anything is very very low) we can still enrich the ClassUnwrapper with a dedicated method probably.&lt;/p&gt;</comment>
                            <comment id="15842882" author="sergey_beryozkin" created="Fri, 27 Jan 2017 13:41:42 +0000"  >&lt;p&gt;OK, lets try to get a test somehow where we can see the custom annotations being lost (with Spring for ex) so that we can start thinking of how to fix it (unwrap the proxy classes), at the next stage we can think of optionally unwrapping the objects, may be at 3.2.0 level...&lt;/p&gt;</comment>
                            <comment id="15842913" author="romain.manni-bucau" created="Fri, 27 Jan 2017 14:23:51 +0000"  >&lt;p&gt;Seems the code changed since I checked, org.apache.cxf.jaxrs.provider.ProviderFactory#handleMapper takes care of that. Here is a test (passing) using cglib (which drops annotations from the proxy class itself):&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; net.sf.cglib.proxy.Dispatcher;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; net.sf.cglib.proxy.Enhancer;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.cxf.endpoint.Server;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.cxf.jaxrs.client.WebClient;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.cxf.transport.local.LocalConduit;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;

&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.GET;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.Path;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.Produces;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.WebApplicationException;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.client.Client;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.client.ClientBuilder;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.client.Invocation;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.core.MediaType;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.core.MultivaluedMap;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.ext.MessageBodyWriter;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; javax.ws.rs.ext.Provider;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.io.OutputStream;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.Annotation;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.Retention;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.lang.annotation.Target;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Type;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.nio.charset.StandardCharsets;

&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; java.lang.annotation.ElementType.TYPE;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; java.lang.annotation.RetentionPolicy.RUNTIME;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; org.junit.Assert.assertEquals;

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;ViciousServiceTest {
    @Test
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void run() {
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; JAXRSServerFactoryBean serverFactoryBean = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; JAXRSServerFactoryBean();
        serverFactoryBean.setProvider(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PlainSerializer());
        serverFactoryBean.setResourceClasses(ViciousService.class);
        serverFactoryBean.setAddress(&lt;span class=&quot;code-quote&quot;&gt;&quot;local:&lt;span class=&quot;code-comment&quot;&gt;//road&quot;&lt;/span&gt;);
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Server server = serverFactoryBean.create();
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Client client = ClientBuilder.newClient();
            &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Invocation.Builder builder = client.target(&lt;span class=&quot;code-quote&quot;&gt;&quot;local:&lt;span class=&quot;code-comment&quot;&gt;//road&quot;&lt;/span&gt;)
&lt;/span&gt;                        .request(APPLICATION_JSON_TYPE);
                WebClient.getConfig(builder).getRequestContext().put(LocalConduit.DIRECT_DISPATCH, &lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;.TRUE);
                &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; response = builder.get(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.class);
                assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;worked\&lt;span class=&quot;code-quote&quot;&gt;&quot;:&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;}&quot;&lt;/span&gt;, response);
            } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
                client.close();
            }
        } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
            server.destroy();
        }
    }

    @Target(TYPE)
    @Retention(RUNTIME)
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; @&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; Plain {
    }

    @Provider
    @Produces(MediaType.APPLICATION_JSON)
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;PlainSerializer &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; MessageBodyWriter&amp;lt;PleaseDontProxyMe&amp;gt; {
        @Override
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; isWriteable(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; aClass, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Type type, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Annotation[] annotations, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; MediaType mediaType) {
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; aClass.isAnnotationPresent(Plain.class);
        }

        @Override
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; getSize(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; PleaseDontProxyMe PleaseDontProxyMe, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; aClass, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Type type, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Annotation[] annotations, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; MediaType mediaType) {
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 0;
        }

        @Override
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void writeTo(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; PleaseDontProxyMe PleaseDontProxyMe, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; aClass, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Type type, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Annotation[] annotations,
                            &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; MediaType mediaType, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; MultivaluedMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt; multivaluedMap, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; OutputStream outputStream) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException, WebApplicationException {
            outputStream.write(&lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;worked\&lt;span class=&quot;code-quote&quot;&gt;&quot;:&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;}&quot;&lt;/span&gt;.getBytes(StandardCharsets.UTF_8));
        }
    }

    @Plain
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;PleaseDontProxyMe {
    }

    @Path(&lt;span class=&quot;code-quote&quot;&gt;&quot;/&quot;&lt;/span&gt;)
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;ViciousService {
        @GET
        @Produces(MediaType.APPLICATION_JSON)
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; PleaseDontProxyMe get() {
            &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; PleaseDontProxyMe willBeProxied = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PleaseDontProxyMe(); &lt;span class=&quot;code-comment&quot;&gt;// in real code it is a service.findById(1) or whatever
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// replace a big stack like JPA/spring/cdi/... creating a proxy. Using cglib
&lt;/span&gt;
            &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Enhancer enhancer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Enhancer();
            enhancer.setClassLoader(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.currentThread().getContextClassLoader());
            enhancer.setSuperclass(PleaseDontProxyMe.class);
            enhancer.setCallback(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Dispatcher() {
                @Override
                &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; loadObject() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
                    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; willBeProxied;
                }
            });
            &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o = enhancer.create();
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; PleaseDontProxyMe.&lt;span class=&quot;code-keyword&quot;&gt;class.&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;(o);
        }
    }
}

/* pom.xml dependencies

  &amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.geronimo.specs&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;geronimo-servlet_3.0_spec&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;cxf-rt-frontend-jaxrs&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.9&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;cxf-rt-rs-client&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.9&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;cxf-rt-transports-local&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.9&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;cglib&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;cglib&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.2.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;

    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
  &amp;lt;/dependencies&amp;gt;
 */
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15843055" author="reta" created="Fri, 27 Jan 2017 16:10:40 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sergey_beryozkin&quot; class=&quot;user-hover&quot; rel=&quot;sergey_beryozkin&quot;&gt;sergey_beryozkin&lt;/a&gt; So it very easy to get annotation lost (if you need test case, I can do that, however it depends on proxier a lot), but the main question remains open: do we need to support the unwrapping mechanism somehow? I am lacking a bit of context here, but haven&apos;t found any examples how `ClassUnwrapper` is actually used? Thanks.&lt;/p&gt;</comment>
                            <comment id="15843069" author="sergey_beryozkin" created="Fri, 27 Jan 2017 16:25:40 +0000"  >&lt;p&gt;As far as this JIRA is concerned the main issue is actually investigating if CXF needs to take some action to make sure MBW sees the entity class level annotations and having such a failing test is a indeed a prerequisite for figuring out if anything needs to be done...  &lt;/p&gt;</comment>
                            <comment id="15843105" author="romain.manni-bucau" created="Fri, 27 Jan 2017 16:48:25 +0000"  >&lt;p&gt;clarification: &lt;b&gt;this&lt;/b&gt; jira was just to slowly ensure CXF uses a single overridable by the user &quot;unwrapper&quot; (kind of merge ClassHelper and ClassUnwrapper). The other one (&lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7228&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CXF-7228&lt;/a&gt;) was about ensuring providers are proxy friendly&lt;/p&gt;</comment>
                            <comment id="15843146" author="sergey_beryozkin" created="Fri, 27 Jan 2017 17:22:53 +0000"  >&lt;p&gt;As we&apos;ve discussed earlier here, ClassUnwrapper, if registered as a bus property, is used for unwrapping proxy classes whenever the classes unwrapping is done via ClassHelper and as I said I&apos;m not sure what else we can do. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-7228&quot; title=&quot;ProviderInfo rarely supports proxies&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-7228&quot;&gt;&lt;del&gt;CXF-7228&lt;/del&gt;&lt;/a&gt; was about ensuring providers (as opposed to entities) get their classes unwrapped - the code you mentioned was updated.&lt;/p&gt;

&lt;p&gt;In this JIRA you also referred to the code which might cause the entity serialization issues due to the possible loss of the annotations which might help MBW to do the work, which so far we can&apos;t reproduce, you have your test working &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;</comment>
                            <comment id="15843191" author="romain.manni-bucau" created="Fri, 27 Jan 2017 17:58:05 +0000"  >&lt;p&gt;yep, only remaining part is probably to @Deprecate ClassHelper if possible to avoid to keep concurrent usages of this one and ClassWrapper but issues are solved &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15843355" author="reta" created="Fri, 27 Jan 2017 19:15:39 +0000"  >&lt;p&gt;Hey &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sergey_beryozkin&quot; class=&quot;user-hover&quot; rel=&quot;sergey_beryozkin&quot;&gt;sergey_beryozkin&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rmannibucau&quot; class=&quot;user-hover&quot; rel=&quot;rmannibucau&quot;&gt;rmannibucau&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;This is the most realistic example I came up with. So there are 2 resource methods:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@Path(&lt;span class=&quot;code-quote&quot;&gt;&quot;/bookstore/book&quot;&lt;/span&gt;)
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;BookStore {
    @GET
    @Path(&lt;span class=&quot;code-quote&quot;&gt;&quot;/proxy/{id}&quot;&lt;/span&gt;)
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Book getBookProxy(@PathParam(&lt;span class=&quot;code-quote&quot;&gt;&quot;id&quot;&lt;/span&gt;) &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; id) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ProxyFactory factory = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ProxyFactory(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Book(id, &lt;span class=&quot;code-quote&quot;&gt;&quot;Sample Book&quot;&lt;/span&gt;));
        factory.setProxyTargetClass(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
        
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Book book = (Book)factory.getProxy();
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; book;
    }
    
    @GET
    @Path(&lt;span class=&quot;code-quote&quot;&gt;&quot;/annotations/{id}&quot;&lt;/span&gt;)
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; IBook getBookAnnotations(@PathParam(&lt;span class=&quot;code-quote&quot;&gt;&quot;id&quot;&lt;/span&gt;) &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; id) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ProxyFactory factory = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ProxyFactory(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Book(id, &lt;span class=&quot;code-quote&quot;&gt;&quot;Sample Book&quot;&lt;/span&gt;));
        factory.setInterfaces(IBook.class);
        
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; IBook book = (IBook)factory.getProxy();
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; book;
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, one of the methods returns class instance (using CGLIB proxy), another returns interface instance (using JDK native proxy). The first one picks `@JsonSerialize(as = Book.class)` and `@JsonIgnoreProperties(&quot;id&quot;)` from the class level declaration, the second one does not, they are not the part of the proxied interface. Not sure CXF has to dial with that kind of issues though ....  &lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="15843542" author="sergey_beryozkin" created="Fri, 27 Jan 2017 21:52:16 +0000"  >&lt;p&gt;Hi Andriy - thanks, these annotations are not part of IProxy, so I do not see this being a problem in this case&lt;br/&gt;
Hi Romain - let me ping you next week may be, I&apos;d like to make sure I understand better a ClassUnwrapper vs ClassHelper dilemma...&lt;br/&gt;
thanks, have good weekends&lt;/p&gt;</comment>
                            <comment id="15843554" author="romain.manni-bucau" created="Fri, 27 Jan 2017 22:01:50 +0000"  >&lt;p&gt;Sure, in one word: ensure CXF exposes to users a single API (unwrapper today) and to core dev a single entry point as well consistent with user one. Enjoy your week end!&lt;/p&gt;</comment>
                            <comment id="16810251" author="reta" created="Thu, 4 Apr 2019 20:17:30 +0000"  >&lt;p&gt;Addressed as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/CXF-8009&quot; title=&quot;CXF should not use ClassUtils for cglib checks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CXF-8009&quot;&gt;&lt;del&gt;CXF-8009&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="13224928">CXF-8009</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12849732" name="proxy-test-annotations.txt" size="12790" author="reta" created="Fri, 27 Jan 2017 19:15:39 +0000"/>
                            <attachment id="12849579" name="proxy-test-case.txt" size="10680" author="reta" created="Thu, 26 Jan 2017 21:35:42 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12314020" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310060" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Estimated Complexity</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10060"><![CDATA[Unknown]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 8 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i39673:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfields>
    </item>
</channel>
</rss>