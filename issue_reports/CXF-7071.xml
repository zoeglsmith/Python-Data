<!-- 
RSS generated by JIRA (8.20.10#820010-sha1:ace47f9899e9ee25d7157d59aa17ab06aee30d3d) at Sat May 27 09:44:48 UTC 2023

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>8.20.10</version>
        <build-number>820010</build-number>
        <build-date>22-06-2022</build-date>
    </build-info>


<item>
            <title>[CXF-7071] HttpServletRequest.getParameter only get String from query not both posted form data</title>
                <link>https://issues.apache.org/jira/browse/CXF-7071</link>
                <project id="12310511" key="CXF">CXF</project>
                    <description>&lt;p&gt;The http request:&lt;br/&gt;
 POST /dubbott-demo-provider/v1.0/users/beanparam HTTP/1.1&lt;br/&gt;
HOST: localhost:8080&lt;br/&gt;
accept: text/plain&lt;br/&gt;
content-type: application/x-www-form-urlencoded&lt;br/&gt;
content-length: 12&lt;/p&gt;

&lt;p&gt;pageIndex=99&lt;/p&gt;

&lt;p&gt;The resource method returns null:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; beanParam(@Context HttpServletRequest req, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; ak) {
        &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; pageIndex = req.getParameter(&lt;span class=&quot;code-quote&quot;&gt;&quot;pageIndex&quot;&lt;/span&gt;)    
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; pageIndex;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;From the servlet 3.1 API doc:&lt;br/&gt;
String javax.servlet.ServletRequest.getParameter(String name)&lt;/p&gt;

&lt;p&gt;Returns the value of a request parameter as a String, or null if the parameter does not exist. Request parameters are extra information sent with the request. For HTTP servlets, parameters are contained in the query string or posted form data.&lt;/p&gt;

&lt;p&gt;if we add below servlet filter:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException, ServletException {
	        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(request.getParameter(&lt;span class=&quot;code-quote&quot;&gt;&quot;pageIndex&quot;&lt;/span&gt;) );
		chain.doFilter(request, response);
	}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output is &quot;99&quot; the response is the same &quot;99&quot;.&lt;/p&gt;

&lt;p&gt;As a conclusion the CXF HttpServletRequest doesn&apos;t comply the Servlet 3.1 API Spec.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13007921">CXF-7071</key>
            <summary>HttpServletRequest.getParameter only get String from query not both posted form data</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.svg">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sergey_beryozkin">Sergey Beryozkin</assignee>
                                    <reporter username="nbqyqx@163.com">Neal Hu</reporter>
                        <labels>
                    </labels>
                <created>Tue, 27 Sep 2016 13:21:20 +0000</created>
                <updated>Mon, 10 Apr 2017 19:04:21 +0000</updated>
                            <resolved>Thu, 30 Mar 2017 10:08:47 +0000</resolved>
                                    <version>3.1.7</version>
                                    <fixVersion>3.0.13</fixVersion>
                    <fixVersion>3.1.11</fixVersion>
                    <fixVersion>3.2.0</fixVersion>
                                    <component>JAX-RS</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                                                                <comments>
                            <comment id="15526209" author="sergey_beryozkin" created="Tue, 27 Sep 2016 13:56:32 +0000"  >&lt;p&gt;Neal, &lt;br/&gt;
CXF does not implement HttpServletRequest - it merely wraps it, the underlying servlet container is obviously not understanding that it needs to cache the form payload while CXF itself can not do it by default either because it will immediately break the JAX-RS service code which may try to read the form payload from InputStream - this stream will become empty if HttpServletRequest caches the form payload into the parameters.&lt;br/&gt;
FYI, this is not a new request. CXF Bus can be set with a &quot;cache.http.request.parameters&quot; property:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/cxf/blob/master/rt/transports/http/src/main/java/org/apache/cxf/transport/http/AbstractHTTPDestination.java#L301&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/blob/master/rt/transports/http/src/main/java/org/apache/cxf/transport/http/AbstractHTTPDestination.java#L301&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enable it and you will see CXF effectively asking HttpServletRequest pre-reading the form payload - but as I said it might cause the side-effects. Either way, please confirm setting that property works &lt;/p&gt;</comment>
                            <comment id="15526520" author="sergey_beryozkin" created="Tue, 27 Sep 2016 15:47:18 +0000"  >&lt;p&gt;By the way, rather than have a POST JAX-RS method accepting @QueryParam it is better to have it accepting FormParam...&lt;/p&gt;</comment>
                            <comment id="15526562" author="nbqyqx@163.com" created="Tue, 27 Sep 2016 16:01:38 +0000"  >&lt;p&gt;Yes, the request is FormParam. I mean the Servlet API can get parameter from QueryParam or FormParam both. But cxf wrapped Servlet request can not accept from QueryParam. The root cause is CXF consumes the inputstream by default and set the servlet  property &quot;usingInputSteam&quot; to true and change the path of parsing the parameter of servlet API getParameter. I will try the property, but the approach are different from servlet consuming the inputstream comparing with CXF.&lt;/p&gt;</comment>
                            <comment id="15526576" author="nbqyqx@163.com" created="Tue, 27 Sep 2016 16:04:02 +0000"  >&lt;p&gt;How can I get the CXF BUS in application code?&lt;/p&gt;</comment>
                            <comment id="15526577" author="nbqyqx@163.com" created="Tue, 27 Sep 2016 16:04:08 +0000"  >&lt;p&gt;How can I get the CXF BUS in application code?&lt;/p&gt;</comment>
                            <comment id="15526646" author="sergey_beryozkin" created="Tue, 27 Sep 2016 16:32:32 +0000"  >&lt;p&gt;What I meant is this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@POST
@Consumes(&lt;span class=&quot;code-quote&quot;&gt;&quot;application/x-www-form-urlencoded&quot;&lt;/span&gt;)
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; processFormPayload(@FormParam(&lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;) &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; a) {}

@GET
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; processQuery(@QueryParam(&lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;) &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; a) {}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;as opposed to programming against HttpServletRequest in the JAX-RS code - the idea of JAX-RS was actually move further from Servlet API &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;Or do you have a case where a POST request can have either HTTP query or form payload ?&lt;/p&gt;

&lt;p&gt;And what is &apos;ak&apos; in your resource method above ? Can you update the description please with the relevant JAX-RS annotations ?&lt;/p&gt;

&lt;p&gt;We might consider optionally disabling wrapping the servlet request input stream (this wrapping existed before we even started implementing JAX-RS) but I&apos;d like to see more information.&lt;/p&gt;
</comment>
                            <comment id="15535216" author="nbqyqx@163.com" created="Fri, 30 Sep 2016 06:41:11 +0000"  >&lt;p&gt;Or do you have a case where a POST request can have either HTTP query or form payload ?&#65293;&#65293;&amp;gt;Yes, the request either has the form payload or query for the same resource. So we need make our resource class like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;@POST
    @Path(&lt;span class=&quot;code-quote&quot;&gt;&quot;beanparam&quot;&lt;/span&gt;)
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes({MediaType.APPLICATION_FORM_URLENCODED, MediaType.APPLICATION_JSON})
    @ApiOperation(value = &lt;span class=&quot;code-quote&quot;&gt;&quot;beanParam&quot;&lt;/span&gt;)
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; beanParam(@BeanParam TalkListParam param, @Context HttpServletRequest req, @HeaderParam(value = &lt;span class=&quot;code-quote&quot;&gt;&quot;ak&quot;&lt;/span&gt;) &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; ak);

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;class &lt;/span&gt;TalkListParam  {

   @QueryParam(value = &lt;span class=&quot;code-quote&quot;&gt;&quot;pageIndex&quot;&lt;/span&gt;)
   &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; currentPage;

    @FormParam(value = &lt;span class=&quot;code-quote&quot;&gt;&quot;pageIndex&quot;&lt;/span&gt;)
    @ApiParam(value = &lt;span class=&quot;code-quote&quot;&gt;&quot;&#39029;&#30721;-ios&quot;&lt;/span&gt;, required = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;, defaultValue = &lt;span class=&quot;code-quote&quot;&gt;&quot;1&quot;&lt;/span&gt;)
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; currentPageIOS=1;

&#65373;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But if we use the servlet api, we can simply get the data via request.getParameter(&quot;pageIndex&quot;), now if the inputsteam parsed by cxf will not follow  the servlet api spec.&lt;/p&gt;</comment>
                            <comment id="15542223" author="sergey_beryozkin" created="Mon, 3 Oct 2016 11:35:14 +0000"  >&lt;p&gt;Neal, &lt;br/&gt;
CXF does not implement Servlet API so a statement that &apos;CXF does not follow Servlet API&apos; is not correct IMHO.&lt;/p&gt;

&lt;p&gt;I see that CXF, in AbstractHttpDestination, wraps HttpServletRequest.getInputStream() in order to have the option to cache for one-way or WS-A SOAP related requests - but the caching is not done otherwise and as I mentioned this code was likely there before we even started doing JAX-RS. &lt;/p&gt;

&lt;p&gt;But note that even if that code was not there CXF would still have to set InputStream.class on the current message sooner or later before the call reaches the service, in the vast majority of cases POST requests will have the input stream non-empty and the runtime can not assume that the service code will not attempt to read the input stream (directly or indirectly - deserializing it into some POJO).&lt;/p&gt;

&lt;p&gt;But a single HttpServletRequest.getInputStream() call does cache the input data, you can validate it separately. And as I said CXF can not avoid calling this method before the POST call reaches the service code.&lt;/p&gt;

&lt;p&gt;I think setting a property which I mentioned earlier is not a bad compromise one can get (you can set it on the bus at the moment a service endpoint is created, example, set it on serverBean.getBus(true)).&lt;/p&gt;

&lt;p&gt;I&apos;ve just double checked - if you do rely on HttpServletRequest.getParameter(String name) then you will get a decoded value only so you will already lose an option to get JAX-RS @Encoded property values when needed.&lt;/p&gt;

&lt;p&gt;Note one other option would be to extend CXF JAX-RS HttpServletRequestFilter (this is what injected as a JAX-RS context) and override a getParameter method which will read the parameter from the cached stream. I may consider doing it later on  &lt;/p&gt;


</comment>
                            <comment id="15544681" author="nbqyqx@163.com" created="Tue, 4 Oct 2016 08:02:20 +0000"  >&lt;p&gt;Sergey,&lt;br/&gt;
The root cause is that the ways parsing the parameter from the input stream are different between WebContainer and CXF. If we get parameter in ServletFilter first, so the injected request will get the data from the cache(WebContainer consumed input stream). If we get the parameter directly, the injected request will get the data by CXF. The behavior is obviously different. &lt;/p&gt;

&lt;p&gt;The property you mentioned will invoke req.getParameterNames() and pre read the data via WebContainer and cache the data. It is an only work around, the root cause may here:&lt;/p&gt;

&lt;p&gt;JAXRSInInterceptor:&lt;br/&gt;
List&amp;lt;Object&amp;gt; params = JAXRSUtils.processParameters(ori, matchedValues, message);-&amp;gt;org.apache.cxf.jaxrs.utils.JAXRSUtils.processParameter(Class&amp;lt;?&amp;gt;, Type, Annotation[], Parameter, MultivaluedMap&amp;lt;String, String&amp;gt;, Message, OperationResourceInfo)&lt;/p&gt;

&lt;p&gt;We may need put the data parsed from body into request.getParameterMap()&lt;/p&gt;</comment>
                            <comment id="15548574" author="sergey_beryozkin" created="Wed, 5 Oct 2016 12:35:26 +0000"  >&lt;p&gt;I&apos;m not sure what you mean that the root cause is in the JAXRSUtils code. The only reason you see no parameter values returned when you work directly against HttpServletRequest (unless that property is set) is that CXF AbstractHttpDestination needs to set HTTP InputStream on the current Message.&lt;/p&gt;

&lt;p&gt;JAXRSUtils will not consult the consumed POST form input stream when resolving @QueryParam - these can only come from HTTP URL query component.&lt;/p&gt;

&lt;p&gt;But as I said, given that you do prefer working directly with HttpServletRequest, but also because users keep asking about it quite regularly, I will consider overriding CXF HttpServletRequest wrapper to ovverride parameter related methods (in fact 4 of them). I won&apos;t recommend users doing it - as I said - it won&apos;t work for cases where the encoded values have to be made available - and it is outside of JAX-RS API - but if it can help some users then I guess it might make sense    &lt;/p&gt;</comment>
                            <comment id="15551184" author="sergey_beryozkin" created="Thu, 6 Oct 2016 07:30:45 +0000"  >&lt;p&gt;Will now work as expected, I think it is indeed the right thing to do, thanks&lt;/p&gt;</comment>
                            <comment id="15551453" author="nbqyqx@163.com" created="Thu, 6 Oct 2016 09:28:35 +0000"  >&lt;p&gt;Sergey&#65292;&lt;/p&gt;

&lt;p&gt;Have you checked in the code? If yes please let me know. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15551482" author="sergey_beryozkin" created="Thu, 6 Oct 2016 09:43:08 +0000"  >&lt;p&gt;Yes I did &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15944572" author="nbqyqx@163.com" created="Tue, 28 Mar 2017 05:50:02 +0000"  >&lt;p&gt;Verified in 3.2.0 and 3.1.11, the issue still exists.&lt;/p&gt;

&lt;p&gt;@Override&lt;br/&gt;
    public String test(@Context HttpServletRequest request, @FormParam(&quot;client_id&quot;) String client_id, @FormParam(&quot;grant_type&quot;) String grant_type, @FormParam(&quot;code&quot;) String code, @FormParam(&quot;client_secret&quot;) String client_secret, @FormParam(&quot;redirect_uri&quot;) String redirect_uri) &lt;/p&gt;
{
        System.out.println(&quot;from request&quot; + request.getParameter(&quot;client_id&quot;) + &quot; &quot; + client_id);
        return request.getParameter(&quot;client_id&quot;);
    }</comment>
                            <comment id="15944903" author="sergey_beryozkin" created="Tue, 28 Mar 2017 10:05:57 +0000"  >&lt;p&gt;I don&apos;t understand why you expect this to work. Adding FormParam causes the JAX-RS runtime to consume the input stream, so when you try read the form-based property from the HttpServletRequest it would obviously return null or empty value.&lt;br/&gt;
If you prefer to read form-based properties as HttpServletRequest parameters then avoid using FormParam&lt;/p&gt;</comment>
                            <comment id="15944948" author="sergey_beryozkin" created="Tue, 28 Mar 2017 11:05:05 +0000"  >&lt;p&gt;Neal, FYI, see these tests:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/cxf/blob/master/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/BookStoreSpring.java#L90&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://github.com/apache/cxf/blob/master/systests/jaxrs/src/test/java/org/apache/cxf/systest/jaxrs/BookStoreSpring.java#L90&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One can read form parameters directly from HttpServletRequest - but having the code being able to work with form properties as FormParams and read them as HttpServletRequest parameters at the same time is not possible. I actually can imagine how it can be done - the CXF code reading the form properties would need to be updated to read them only from CXF HttpServletRequestFilter code but it would probably break some users&apos; code and possibly some TCK tests and to be honest I don&apos;t see it being needed.  &lt;/p&gt;</comment>
                            <comment id="15947304" author="nbqyqx@163.com" created="Wed, 29 Mar 2017 15:06:40 +0000"  >&lt;p&gt;Ok&#65292;thanks. It works well on 3.1 and 3.2 when only get parameters from httpservletrequest without FormParam injection. It should be limitation as Jersey works well in both.&lt;/p&gt;

&lt;p&gt;&#21457;&#33258;&#25105;&#30340; iPhone&lt;/p&gt;
</comment>
                            <comment id="15947369" author="sergey_beryozkin" created="Wed, 29 Mar 2017 15:42:04 +0000"  >&lt;p&gt;Hi Neal, may be this is the only reason we might want to keep this JIRA open &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, though I&apos;m honestly not keen to spend any time on it in the short term, tweaking the sensitive code to let people read from HttpServletRequest and FormParams at the same time, some form parameters from HttpServletRequest, some other form params from FormParams, what is the point ? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, especially given that we&apos;d like to encourage users avoid working directly with HttpServletRequest if possible.&lt;/p&gt;</comment>
                            <comment id="15947526" author="nbqyqx@163.com" created="Wed, 29 Mar 2017 17:03:40 +0000"  >&lt;p&gt;Yes, usually we will not use request object directly. But some time we need pass request in order to instance other object such as Apache oltu. Inside its construct method the form parameter will be evaluated.&lt;/p&gt;

&lt;p&gt;From iPhone&lt;/p&gt;
</comment>
                            <comment id="15948790" author="sergey_beryozkin" created="Thu, 30 Mar 2017 10:08:47 +0000"  >&lt;p&gt;Fix proved to be much easier than I thought &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12314020" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310060" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Estimated Complexity</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10060"><![CDATA[Unknown]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 years, 9 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i344zz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfields>
    </item>
</channel>
</rss>